#include <Adafruit_GFX.h>   
 
#include <Adafruit_ST7735.h> 
#include <SPI.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include "DHT.h"
#include <ESP32Servo.h>

#define TFT_RST 4
#define TFT_DC  2
#define TFT_CS  15

#define BACKCOLOR 0x18E3
#define SCALECOLOR 0xFFFF
 //Ultrasonic Echo Pin
const uint8_t oneWireBus = 5;  //WaterProof Probe Pin
const int servo1Pin = 17; //Servo 1 Pin
const int servo2Pin = 16; //Servo 2 Pin
const uint8_t buzzer = 21;  //Buzzer Pin

Servo servo1; //Servo #1
Servo servo2; //Servo #2

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);  //Tft display


OneWire oneWire(oneWireBus);

DallasTemperature sensors(&oneWire);

int tempC;

  const int numReadings = 10;
  double dreadings[numReadings];  // the readings from the ultrasonic
  int dreadIndex = 0;          // the index of the current d reading
  double dtotal = 0;              // the d running total
  double daverage = 0;            // the d average

int minUs = 500;
int maxUs = 2400;
int pos1;
int pos2;
int selectedOption, lastSelection;
int potSelect;
const int options[] = {0, 1, 2, 3};
bool inOptions =  true;

int LastPercent = 0;  

// Global variables
  int valueBlock[500];
  int timeBlock[500];
  int locationBlock[500];
  int valuePos;
  int blockPos;
  int temp, humid;
  bool error;
  bool getDistance = true;
  bool slowprint;

  DHT dht(22, DHT11);
  
// Editable Variables

  uint16_t graphColor = ST77XX_BLUE;
  uint16_t pointColor = ST77XX_BLACK;
  uint16_t lineColor = ST77XX_GREEN;

  int graphRange = 50;
  int markSize = 3;
  
// Calculate Values
  const int numberOfMarks = 5;
  const int originX = 50+12;
  const int originY = 108;
  const int sizeX = 100;
  const int sizeY = 80;
  const int deviation = 15;
  
  int boxSize = (sizeX / numberOfMarks);
  int mark[] = {(boxSize + deviation), ((boxSize * 2) + deviation), ((boxSize * 3) + deviation), ((boxSize * 4) + deviation), ((boxSize * 5) + deviation), ((boxSize * 6) + deviation), ((boxSize * 7) + deviation), ((boxSize * 8) + deviation)};

  const int adjustRects = 7;
  const int adjustMarks = 20+12;
  const int minorSizeY = (originY + 10);
  const int minorSizeX = (originX - 10);

  int numberSize = (sizeY / 6);
  int number[] = {numberSize, (numberSize * 2), (numberSize * 3), (numberSize * 4), (numberSize * 5), (numberSize * 6)};

  int numberValue = (graphRange / 6);
  int val[] = {graphRange, (numberValue * 5), (numberValue * 4), (numberValue * 3), (numberValue * 2), numberValue};

void IRAM_ATTR isr(){
  if (inOptions){
    inOptions = false;
  }else if (!inOptions){
    inOptions = true;
  }
}

void TFTPrint(uint16_t x, uint16_t y, uint8_t size,uint16_t color , String print){
  tft.setCursor(x, y);
  tft.setTextSize(size);
  tft.setTextColor(color);
  tft.print(print);
}

void TFTPrint(uint16_t x, uint16_t y, uint8_t size,uint16_t color , int print){
  tft.setCursor(x, y);
  tft.setTextSize(size);
  tft.setTextColor(color);
  tft.print(print);
}

void TFTSlowPrint(uint16_t x, uint16_t y, uint8_t size,uint16_t color , String print, int Delay){
  slowprint = true;
  tft.setCursor(x, y);
  tft.setTextSize(size);
  tft.setTextColor(color);
  for (int i = 0; i<print.length(); i++){
    char c = print.charAt(i);
    tft.print(c);
    vTaskDelay(Delay / portTICK_PERIOD_MS);
  }
  slowprint = false;
}

void drawGraph()
{
  // draw title
  tft.fillScreen(ST77XX_WHITE);
  tft.fillRect(1,1,39,126, ST7735_BLUE);


  TFTPrint(6,3,1,ST7735_WHITE,"Servo");
  TFTPrint(9,13,1,ST7735_WHITE,"Mode");


  tft.fillRect(75 - adjustRects, 3, 82, 18, ST77XX_BLUE); // set the cursor
  tft.fillRect(92 - adjustRects, 4, 32, 16, ST77XX_WHITE);
  tft.fillRect(149 - adjustRects, 4, 7, 16, ST77XX_WHITE);
  tft.setCursor(150 - adjustRects, 5);
  tft.setTextColor(ST77XX_BLUE); // set the colour of the text
  tft.setTextSize(1); // set the size of the text
  tft.print("H");
  tft.setCursor(101 - adjustRects, 5);
  tft.setTextColor(ST77XX_BLUE); // set the colour of the text
  tft.setTextSize(2); // set the size of the text
  tft.print((char)247);
  tft.print("C");
  // draw outline
  tft.drawLine(originX, originY, (originX + sizeX), originY, graphColor);
  tft.drawLine(originX, originY, originX, (originY - sizeY), graphColor);

  // adjustMarks = originX +2 - mark[1];

  // draw lables
  for(int i = 0; i < numberOfMarks; i++)
  {
    tft.drawLine(mark[i]+adjustMarks, originY, mark[i]+adjustMarks, minorSizeY +3, graphColor);
  }

  // draw numbers
  for(int i = 0; i < 6; i++)
  {
    tft.drawLine(originX-1, (originY - number[i]), minorSizeX+5, (originY - number[i]), graphColor);
  }
  int timeRange = 10;
  int adjustpixel = 0;
  for(int i = 0; i <= 4; i++)
    {
      tft.setCursor((mark[(4 - i)] - 5)+adjustMarks +adjustpixel, (originY + 10));
      tft.setTextColor(graphColor, ST77XX_WHITE);
      tft.setTextSize(1);
      tft.println(timeRange);
      timeRange-=2;
      adjustpixel = 3;
      
    }

  // draw number values
  for(int i = 0; i < 6; i++)
  {
    if (i == 5){
      tft.setCursor((originX - 18) + 4, (number[i] + numberSize) + 1);
    } else{
      tft.setCursor((originX - 18), (number[i] + numberSize) + 1);
    }
    tft.setTextColor(graphColor);
    tft.setTextSize(1);
    tft.println(val[i]);
  }
}

void graph()
{
  sensors.requestTemperatures();
  tempC = int(sensors.getTempCByIndex(0));
  temp = dht.readTemperature();
  humid = dht.readHumidity();
  //Serial.println(tempC);
  
  

  if ((temp <= 50 && temp >= 0)){
  tft.fillRect(75 - adjustRects, 3, 25, 18, ST77XX_BLUE);
    
  tft.setCursor(77 - adjustRects, 5);
  tft.setTextColor(ST77XX_WHITE); // set the colour of the text
  tft.setTextSize(2); // set the size of the text
  tft.println(temp);
  }else{
  
  }
  if (humid < 99){
    tft.fillRect(124 - adjustRects, 3, 25, 18, ST77XX_BLUE);
  tft.setCursor(126 - adjustRects, 5);
  tft.setTextColor(ST77XX_WHITE); // set the colour of the text
  tft.setTextSize(2); // set the size of the text
  tft.println(humid);
  }else{
  
  }
  
  if(slowprint){
    vTaskDelay(100/ portTICK_PERIOD_MS);
  }else
  {if ((tempC >50 || tempC < 0)){
  tft.fillRect((originX + 2), (originY - sizeY), sizeX, sizeY, ST77XX_WHITE);
  tft.setTextWrap(false);
  tft.setCursor((originX+20), (originY -50));
  tft.setTextColor(ST77XX_BLACK);
  tft.setTextSize(2);
  tft.print("Too");
  tft.setCursor((originX+16), (originY -34));
  tft.print("High");
  error = true;
  }else{
  error = false;
  timeBlock[valuePos] = ((millis() - 4500) / 1000);

  valueBlock[valuePos] = tempC;
  if (error){
    tft.fillRect((originX + 2), (originY - sizeY), sizeX, sizeY, ST77XX_WHITE);
    tft.setTextWrap(true);
    error = false;
  } else{

  tft.fillRect(46,originY,15,8,ST7735_WHITE);
  TFTPrint(46, originY, 1, ST7735_BLUE, tempC);
  }

  
  if(blockPos < 5)
  {
    // print the time
    //tft.setCursor((mark[valuePos] - 5)+56, (originY + 16));
    //tft.setTextColor(graphColor, ST77XX_WHITE);
    //tft.setTextSize(1);
    //tft.println(timeBlock[valuePos]);
    
    // map the value
    locationBlock[valuePos] = map(tempC, 0, graphRange, originY, (originY - sizeY));

    // draw point
    tft.fillRect((mark[valuePos] - 1)+adjustMarks, (locationBlock[valuePos] - 1), markSize, markSize, pointColor);

    // try connecting to previous point
    if(valuePos != 0)
    {
      tft.drawLine(mark[valuePos]+adjustMarks, locationBlock[valuePos], mark[(valuePos - 1)]+adjustMarks, locationBlock[(valuePos - 1)], lineColor);
    }

    blockPos++;
  }
  else
  {
    // clear the graph's canvas
    tft.fillRect((originX + 1), (originY - sizeY), sizeX, sizeY, ST77XX_WHITE);

    // map the value - current point
    locationBlock[valuePos] = map(tempC, 0, graphRange, originY, (originY - sizeY));

    // draw point - current point
    tft.fillRect((mark[4])+adjustMarks, (locationBlock[valuePos] - 1), markSize, markSize, pointColor);

    // draw all points
    for(int i = 0; i < 5; i++)
    {
      tft.fillRect((mark[(blockPos - (i + 1))] - 1)+adjustMarks, (locationBlock[(valuePos - i)] - 1), markSize, markSize, pointColor);
    }

    // draw all the lines
    for(int i = 0; i < 4; i++)
    {
      tft.drawLine(mark[blockPos - (i + 1)]+adjustMarks, locationBlock[valuePos - i], mark[blockPos - (i + 2)]+adjustMarks, locationBlock[valuePos - (i + 1)], lineColor);
    }
    
    // change time lables
    //for(int i = 0; i <= 4; i++)
    //{
    //  tft.setCursor((mark[(4 - i)] - 5)+54, (originY + 16));
    //  tft.setTextColor(graphColor, ST77XX_WHITE);
    //  tft.setTextSize(1);
    //  tft.println(timeBlock[valuePos - i]);
    //}
  }

  valuePos++;}}
}



void drawHome()
{
  tft.fillScreen(BACKCOLOR);
  delay(500);
  
  TFTSlowPrint(60, 10, 2, ST7735_WHITE,"Lab", 80);

  TFTSlowPrint(81, 29, 2, ST7735_WHITE,"7", 80);

  vTaskDelay(250 / portTICK_PERIOD_MS);

  TFTSlowPrint(2, 50, 2, ST7735_MAGENTA,"Members:" ,100);
  
  vTaskDelay(250 / portTICK_PERIOD_MS);
  TFTSlowPrint(0, 66, 1, ST7735_CYAN,"  Castro\n  Manocdoc\n  Narag\n  Salih\n  Sison", 80);

  delay(1500);

  tft.fillScreen(ST77XX_WHITE);
  delay(500);
}

void ServoOptions(){
  selectedOption = options[1];
  tft.fillRect(2,21,38,100,ST7735_BLUE);
  TFTPrint(5,29,1,ST7735_WHITE,"Both");
  
  TFTPrint(5,41,1,ST7735_WHITE,"Left");
  
  TFTPrint(5,53,1,ST7735_WHITE,"Right");
  
  while (inOptions){
  potSelect = analogRead(A0);
  potSelect = map(potSelect, 0, 4095, 1, 3);
  selectedOption = potSelect;
  if (lastSelection != selectedOption){
  switch (selectedOption)
  {
  case 1:
    tft.drawRect(2,27,37,11,ST7735_WHITE);
    tft.drawRect(2,39,37,11,ST7735_BLUE);
    tft.drawRect(2,51,37,11,ST7735_BLUE);
    break;
  case 2:
    tft.drawRect(2,27,37,11,ST7735_BLUE);
    tft.drawRect(2,39,37,11,ST7735_WHITE);
    tft.drawRect(2,51,37,11,ST7735_BLUE);
    break;
  case 3:
    tft.drawRect(2,27,37,11,ST7735_BLUE);
    tft.drawRect(2,39,37,11,ST7735_BLUE);
    tft.drawRect(2,51,37,11,ST7735_WHITE);
    break;
  default:
    break;
  }
  }else{

  }
  lastSelection= selectedOption;
  }
  int val;
  switch (selectedOption)
  {
  case 1:
    tft.fillRect(2,27,38,100,ST7735_BLUE);
    TFTPrint(7,29,1,ST7735_WHITE,"Both");
    while (!inOptions){
        val = analogRead(A0);
        val = map(val, 0, 4095, 0, 180);     // scale it to use it with the servo (value between 0 and 180)
        servo1.write(val);                  // set the servo position according to the scaled value
        servo2.write(val);                  // set the servo position according to the scaled value
        delay(5);
    }
    break;
  case 2:
    tft.fillRect(2,27,38,100,ST7735_BLUE);
    TFTPrint(8,29,1,ST7735_WHITE,"Left");
    servo2.write(90);
    while (!inOptions){
        val = analogRead(A0);
        val = map(val, 0, 4095, 0, 180);     // scale it to use it with the servo (value between 0 and 180)
        servo1.write(val);                  // set the servo position according to the scaled value
        delay(5);
    }
    break;
  case 3:
    tft.fillRect(2,27,38,100,ST7735_BLUE);
    TFTPrint(5,29,1,ST7735_WHITE,"Right");
    servo1.write(90);
    while (!inOptions){
        val = analogRead(A0);
        val = map(val, 0, 4095, 0, 180);     // scale it to use it with the servo (value between 0 and 180)
        servo2.write(val);                  // set the servo position according to the scaled value
        delay(5);
    }
    break;
  default:
    break;
  }

}



void lab7(void *param){
  while(1){
    //if see graph
    graph();
    vTaskDelay(2000 / portTICK_PERIOD_MS);
    //Serial.printf("\nLab7 - Free Stack Space: %d", uxTaskGetStackHighWaterMark(NULL));
  }
}

void servo2Knob(void *param){
  int val;
  while(1){
    val = analogRead(A0);
    val = map(val, 0, 4095, 0, 180);     // scale it to use it with the servo (value between 0 and 180)
    servo2.write(val);                  // set the servo position according to the scaled value
    delay(5);
  }
}

void servo1sweep(void *param){
  int pos;
  while (1){
  
    	for (pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees
		// in steps of 1 degree
		  servo1.write(pos);    // tell servo to go to position in variable 'pos'
      delay(5);// waits 15ms for the servo to reach the position
	  }
	  for (pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
	  	servo1.write(pos);    // tell servo to go to position in variable 'pos'
      delay(5);             // waits 15ms for the servo to reach the position
	  }
  }
}

void buzzerloop(void *param){
  while (1){
    
        for (int fadeValue = 0; fadeValue <= 250; fadeValue += 5) {
      // sets the value (range from 0 to 255):
      analogWrite(buzzer, fadeValue);
      // wait for 30 milliseconds to see the dimming effect
      if (!inOptions){
        switch (selectedOption){
          case 1:
           delay(50); 
            break;
          case 2:
           delay(25); 
            break;
          case 3:
           delay(16); 
            break;
          default:
            break;
      }
      } else {
		  delay(random(20,40)); 
      }
    }
    // fade out from max to min in increments of 5 points:
    for (int fadeValue = 250; fadeValue >= 0; fadeValue -= 5) {
      // sets the value (range from 0 to 255):
      analogWrite(buzzer, fadeValue);
      // wait for 30 milliseconds to see the dimming effect      
		  if (!inOptions){
        switch (selectedOption){
          case 1:
           delay(12); 
            break;
          case 2:
           delay(5); 
            break;
          case 3:
           delay(3); 
            break;
          default:
            break;
      }
      } else {
		  delay(random(20,40)); 
      }
  
    }
  }
}

void ServoControl(void *param){
  while (1){
    ServoOptions();
  }
  
}

ESP32PWM pwm;
void setup(void) {

  ESP32PWM::allocateTimer(0);
	ESP32PWM::allocateTimer(1);
	ESP32PWM::allocateTimer(2);
	ESP32PWM::allocateTimer(3);
  Serial.begin(115200);
  tft.initR(INITR_BLACKTAB);  
  pinMode(0, INPUT_PULLUP);
  sensors.begin();

  attachInterrupt(0,isr,FALLING);

  servo1.setPeriodHertz(50);
  servo2.setPeriodHertz(50);
  servo1.attach(servo1Pin, minUs, maxUs);
  servo2.attach(servo2Pin, minUs, maxUs);

  delay(500);
 
  tft.setRotation(1);



  xTaskCreatePinnedToCore(
    buzzerloop,
    "buzzer beep",
    2000,
    NULL,
    2,
    NULL,
    0
  );

  //drawHome();
  drawGraph();

  xTaskCreatePinnedToCore(
    ServoControl,
    "Servo Control",
    5000,
    NULL,
    1,
    NULL,
    1
  );
  delay(100);
  xTaskCreatePinnedToCore(
    lab7,
    "Lab 7",
    5000,
    NULL,
    1,
    NULL,
    1
  );
  
}

void loop() {  
    //int newPercent;
    //RawValue = analogRead(analogIn);
    //newPercent = int((RawValue/4095.0)* 100.0);
    //
    //if (newPercent != LastPercent){
    //  drawBar(-30, newPercent); 
    //  delay(50);    
    //}
    //graph();
    //delay(2000); 
}
  