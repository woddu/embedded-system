#include <esp_now.h>
#include <WiFi.h>

//B8:D6:1A:40:3C:2C
// REPLACE WITH YOUR RECEIVER MAC Address
//94:E6:86:39:60:A0
uint8_t ervin30Pin[] = {0xA8, 0x42, 0xE3, 0x59, 0xA7, 0x30};
uint8_t wemosD1R32[] = {0x94, 0xE6, 0x86, 0x39, 0x60, 0xA0};
uint8_t wemosMini132[] = {0xD8, 0xBC, 0x38, 0xE5, 0x34, 0x74};
// r24 p/p r14 p/p r rf tm1f tm2f a/m tm1+1 tm1+2 tm1+3 tm2+1 tm2+2 tm2+3
const uint8_t button[] = {13, 12, 14, 27, 26, 25, 33, 32, 15, 2, 4, 17, 16, 5, 18, 19};

int val[sizeof(button)/sizeof(button[0])];
int prev[sizeof(button)/sizeof(button[0])];

struct channel{
  int channelnum;
  int channelstate;
};

channel channels[] = {{1,0}, {2,0}, {3,0}, {4,0}, {5,0},{6,0},{7,0},{8,0},{9,0},{10,0},{11,0}, {12,0}, {13,0}, {14,0}, {15,0},{16,0}};

esp_now_peer_info_t pWemosD1R32;

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

void setup() {
  // Init Serial Monitor
  Serial.begin(115200);
  for (int i = 0; i < sizeof(button)/sizeof(button[0]); i++){
    pinMode(button[i], INPUT_PULLDOWN);
  }
  
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  
  // Register peer
  memcpy(pWemosD1R32.peer_addr, wemosD1R32, 6);
  pWemosD1R32.channel = 0;  
  pWemosD1R32.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&pWemosD1R32) != ESP_OK){
    Serial.println("Failed to add wemos peer");
    return;
  }
  
  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
}
unsigned long t2,t1;
void loop() {
  for (int i = 0; i < sizeof(val)/sizeof(val[0]); i++){
      prev[i] = val[i];
    }
    for (int i = 0; i < sizeof(val)/sizeof(val[0]); i++){
      val[i] = digitalRead(button[i]);
    }
    for (int i = 0; i < sizeof(val)/sizeof(val[0]); i++){
      if (i == 1 || i == 3){
        if (val[i] == HIGH && prev[i] == LOW){
          if (channels[i].channelstate == 0){
            channels[i].channelstate = 1;
          } else if (channels[i].channelstate == 1){
            channels[i].channelstate = 0;
          }
            esp_now_send(wemosD1R32, (uint8_t *) &channels[i], sizeof(channels[i]));
        }
      } else if (i ==8){
        if (val[i] == HIGH && prev[i] == LOW){
          t1 = millis();
          if (channels[i].channelstate == 0){
            channels[i].channelstate = 1;
          } else if (channels[i].channelstate == 1){
            channels[i].channelstate = 0;
          }
            esp_now_send(wemosD1R32, (uint8_t *) &channels[i], sizeof(channels[i]));
        } else if (val[i] == HIGH && prev[i] == HIGH){
          t2 = millis();
          if ( t2 - t1 >= 3)
            channels[i].channelstate = 2;
            esp_now_send(wemosD1R32, (uint8_t *) &channels[i], sizeof(channels[i]));
        }
      }else {
        if (val[i] == HIGH && prev[i] == LOW){      
          channels[i].channelstate = 1;          
          esp_now_send(wemosD1R32, (uint8_t *) &channels[i], sizeof(channels[i]));
        } else if (val[i] == LOW && prev[i] == HIGH) {
          channels[i].channelstate = 0;          
          esp_now_send(wemosD1R32, (uint8_t *) &channels[i], sizeof(channels[i]));
        }
      }
    }
    vTaskDelay(10 / portTICK_PERIOD_MS);
}
