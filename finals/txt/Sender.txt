#include <esp_now.h>
#include <WiFi.h>

// REPLACE WITH YOUR RECEIVER MAC Address
uint8_t ervin30Pin[] = {0xA8, 0x42, 0xE3, 0x59, 0xA7, 0x30};
uint8_t wemosD1R32[] = {0xA8, 0x42, 0xE3, 0x4C, 0xBC, 0x2C};
uint8_t wemosMini132[] = {0xD8, 0xBC, 0x38, 0xE5, 0x34, 0x74};
const uint8_t button[] = {13, 12, 14, 27, 26, 25, 33, 32, 35, 34};


struct led{
  int lednum;
  int ledstate;
};

led leds[] = {{1,0}, {2,0}, {3,0}, {4,0}, {5,0},{6,0},{7,0},{8,0},{9,0},{10,0}};


esp_now_peer_info_t pErvin30Pin;
esp_now_peer_info_t pWemosD1R32;


// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}
 
 


void Buttons(void *param){
  int val[10];
  int prev[10];
  for (int i = 0; i < 10; i++){
      val[i]= 0;
      prev[i]= 0;
    }
  while (1){
    for (int i = 0; i < 10; i++){
      prev[i] = val[i];
    }
    for (int i = 0; i < 10; i++){
      val[i] = digitalRead(button[i]);
    }

    for (int i = 0; i < 10; i++){
      if (i == 6){
        if (val[i] == HIGH && prev[i] == LOW){
          if (leds[i] == 1){
            leds[i] = 0;
          } else if (leds[i] == 0){
            leds[i] = 1;
          }
          esp_now_send(wemosD1R32, (uint8_t *) &leds[i], sizeof(leds[i]));
        }
      } else {
        if (val[i] == HIGH && prev[i] == LOW) {
          // turn LED on:
          leds[i].ledstate = 1;
          esp_now_send(ervin30Pin, (uint8_t *) &leds[i], sizeof(leds[i]));
          esp_now_send(wemosD1R32, (uint8_t *) &leds[i], sizeof(leds[i]));
        } else if (prev[i] == HIGH && val[i] == LOW) {
          // turn LED off:
          leds[i].ledstate = 0;
          esp_now_send(ervin30Pin, (uint8_t *) &leds[i], sizeof(leds[i]));
          esp_now_send(wemosD1R32, (uint8_t *) &leds[i], sizeof(leds[i]));
        }
      }
    }
    vTaskDelay(50 / portTICK_PERIOD_MS);
  }
}

void setup() {
  // Init Serial Monitor
  Serial.begin(115200);
  for (int i = 0; i < 10; i++){
    pinMode(button[i], INPUT_PULLDOWN);
  }
  xTaskCreatePinnedToCore(
    Buttons,
    "buttons",
    5000,
    NULL,
    1,
    NULL,
    0
  );

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  memcpy(pErvin30Pin.peer_addr, ervin30Pin, 6);
  pErvin30Pin.channel = 0;  
  pErvin30Pin.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&pErvin30Pin) != ESP_OK){
    Serial.println("Failed to add ervin peer");
    return;
  }

  memcpy(pWemosD1R32.peer_addr, wemosD1R32, 6);
  pWemosD1R32.channel = 0;  
  pWemosD1R32.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&pWemosD1R32) != ESP_OK){
    Serial.println("Failed to add wemos peer");
    return;
  }

}

void loop() {
  
}
