/*
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com/esp-now-esp32-arduino-ide/
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files.
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
*/

#include <esp_now.h>
#include <WiFi.h>

const uint8_t ledpin[] = {22,21,19,18,5,17,16,4,2,15};

struct led{
  int lednum;
  int ledstate;
};

led leds[] = {{1,0}, {2,0}, {3,0}, {4,0}, {5,0},{6,0},{7,0},{8,0},{9,0},{10,0}};


// callback function that will be executed when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  int lednum;
  memcpy(&lednum, incomingData, sizeof(int));
  switch (lednum){
    case 1:
      memcpy(&leds[0], incomingData, sizeof(leds[0]));
      Serial.print("lednum = ");
      Serial.print(leds[0].lednum);
      Serial.print("lednum = ");
      Serial.print(leds[0].ledstate);
      Serial.println();
      break;
    case 2:
      memcpy(&leds[1], incomingData, sizeof(leds[1]));
      Serial.print("lednum = ");
      Serial.print(leds[1].lednum);
      Serial.print("lednum = ");
      Serial.print(leds[1].ledstate);
      Serial.println();
      break;
    case 3:
      memcpy(&leds[2], incomingData, sizeof(leds[2]));
      Serial.print("lednum = ");
      Serial.print(leds[2].lednum);
      Serial.print("lednum = ");
      Serial.print(leds[2].ledstate);
      Serial.println();
      break;
    case 4:
      memcpy(&leds[3], incomingData, sizeof(leds[3]));
      Serial.print("lednum = ");
      Serial.print(leds[3].lednum);
      Serial.print("lednum = ");
      Serial.print(leds[3].ledstate);
      Serial.println();
      break;
    case 5:
      memcpy(&leds[4], incomingData, sizeof(leds[4]));
      Serial.print("lednum = ");
      Serial.print(leds[4].lednum);
      Serial.print("lednum = ");
      Serial.print(leds[4].ledstate);
      Serial.println();
      break;
    case 6:
      memcpy(&leds[5], incomingData, sizeof(leds[5]));
      Serial.print("lednum = ");
      Serial.print(leds[5].lednum);
      Serial.print("lednum = ");
      Serial.print(leds[5].ledstate);
      Serial.println();
      break;
    case 7:
      memcpy(&leds[6], incomingData, sizeof(leds[6]));
      Serial.print("lednum = ");
      Serial.print(leds[6].lednum);
      Serial.print("lednum = ");
      Serial.print(leds[6].ledstate);
      Serial.println();
      break;
    case 8:
      memcpy(&leds[7], incomingData, sizeof(leds[7]));
      Serial.print("lednum = ");
      Serial.print(leds[7].lednum);
      Serial.print("lednum = ");
      Serial.print(leds[7].ledstate);
      Serial.println();
      break;
    case 9:
      memcpy(&leds[8], incomingData, sizeof(leds[8]));
      Serial.print("lednum = ");
      Serial.print(leds[8].lednum);
      Serial.print("lednum = ");
      Serial.print(leds[8].ledstate);
      Serial.println();
      break;
    case 10:
      memcpy(&leds[9], incomingData, sizeof(leds[9]));
      Serial.print("lednum = ");
      Serial.print(leds[9].lednum);
      Serial.print("lednum = ");
      Serial.print(leds[9].ledstate);
      Serial.println();
      break;
    
    default:
      Serial.println("Unknown");
      break;
  }
}

void Leds(void *param){
  while(1){
    for (int i = 0; i < 10; i++){
    digitalWrite(ledpin[i], leds[i].ledstate);
  }
    vTaskDelay(100 / portTICK_PERIOD_MS);
  }
}

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);
  for (int i = 0; i < 10; i++){
    pinMode(ledpin[i], OUTPUT);
  }

  xTaskCreatePinnedToCore(
    Leds,
    "Leds",
    5000,
    NULL,
    1,
    NULL,
    0
  );

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);
  delay(1000);
  Serial.print("MAC: "); Serial.println(WiFi.macAddress());
  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  
  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
  esp_now_register_recv_cb(OnDataRecv);
}
 
void loop() {

}
