#include <Time.h>
#include <Preferences.h>
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library for ST7735
#include <SPI.h>

#include <Fonts/FreeSans24pt7b.h>
#include <Fonts/FreeSans18pt7b.h>
#include <Fonts/FreeMono18pt7b.h>
#include <Fonts/FreeSans12pt7b.h>
#include <Fonts/FreeSans9pt7b.h>

#define TFT_RST 17
#define TFT_DC  16
#define TFT_CS  4

struct tm timeinfo;

Preferences pref;

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

const int buttons[] = {15, 2};

bool editState, selectState, valState, updated, editTime, editAlarm, selectEdit;

int _select, tempHour, tempMin, tempDay, tempMonth, tempPrev;

int prev[2], curr[2];

int16_t  x, y;
uint16_t w, h;

void readButtons(){
  for (int i = 0; i < 2; i++)
    prev[i] = curr[i];
  for (int i = 0; i < 2; i++)
    curr[i] = digitalRead(buttons[i]);
}

// void TFTDisplay(void *param){
//   tft.setTextColor(ST77XX_WHITE);
//   while(1){    
//     //tft.fillScreen(ST77XX_BLACK);
    
//     // Serial.print(tft.getCursorX());
//     //  Serial.print(",");
//     //  Serial.print(tft.getCursorY());
//     //  Serial.print(",\n");
    
//   // if(editState){
//   //   tft.setCursor(0, 32);
//   //   tft.println("Editing");

//   // } else {
//   //   tft.setCursor(0, 56);
//   //   if(updated){
//   //     tft.setFont(&FreeSans24pt7b);
//   //     tft.setTextSize(1.5);
//   //     tft.println(&timeinfo, "%H:%M");
//   //   } else {
//   //     tft.setFont(&FreeSans9pt7b);
//   //     tft.println("not updated");
//   //   }
//   // } 

//     vTaskDelay(10 / portTICK_PERIOD_MS);  
//   }
// }

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  for (int i = 0; i < 2; i++)
    pinMode(buttons[i], INPUT_PULLDOWN);
    
  pref.begin("Time", false);

  tft.initR(INITR_BLACKTAB);
  tft.setTextWrap(true);
  tft.fillScreen(ST77XX_BLACK);
  tft.setRotation(tft.getRotation()+1);

  // xTaskCreatePinnedToCore(
  //   TFTDisplay,
  //   "TFT Display",
  //   8000,
  //   NULL,
  //   1,
  //   NULL,
  //   0
  // );

}


bool drawn = false;

void loop() {
  // put your main code here, to run repeatedly:
  readButtons();
  if (editState){
    selectState = true;
    tft.fillScreen(ST77XX_BLACK);
    tft.setFont(&FreeSans12pt7b);
    tft.setTextSize(1);
    tft.setCursor(56,26);
    tft.print("Edit");
    tft.setFont(&FreeSans18pt7b);        
    tft.drawRect(8, 33, 85, 40, ST77XX_WHITE);
    tft.drawRect(9, 34, 83, 38, ST77XX_WHITE);
    tft.setTextColor(ST77XX_WHITE);
    tft.setCursor(12, 65);
    tft.print("Time");    
    tft.drawRect(53, 77, 100, 40, ST77XX_WHITE);
    tft.drawRect(54, 78, 98, 38, ST77XX_WHITE);
    tft.setTextColor(ST77XX_WHITE);
    tft.setCursor(58, 109);
    tft.print("Alarm");
    if (tempPrev == 0){
      tft.fillRect(8, 33, 85, 40, ST77XX_WHITE);
      tft.setTextColor(ST77XX_BLACK);
      tft.setCursor(12, 65);
      tft.print("Time");
      tft.fillRect(53, 77, 100, 40, ST77XX_BLACK);         
      tft.drawRect(53, 77, 100, 40, ST77XX_WHITE);
      tft.drawRect(54, 78, 98, 38, ST77XX_WHITE);
      tft.setTextColor(ST77XX_WHITE);
      tft.setCursor(58, 109);
      tft.print("Alarm");
    }
    while(selectState){
      tempPrev = selectEdit;
      selectEdit = map(analogRead(A0), 0, 4095, 0, 1);
      if (analogRead(A0) >= 0 && analogRead(A0) <= 2047){
        selectEdit = 0;
      } else if(analogRead(A0) >= 2048 && analogRead(A0) <= 4095) {
        selectEdit = 1;        
      }
      Serial.println(analogRead(A0));         
      if(!selectEdit){
        if(tempPrev != selectEdit){
          tft.fillRect(8, 33, 85, 40, ST77XX_WHITE);
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(12, 65);
          tft.print("Time");
          tft.fillRect(53, 77, 100, 40, ST77XX_BLACK);         
          tft.drawRect(53, 77, 100, 40, ST77XX_WHITE);
          tft.drawRect(54, 78, 98, 38, ST77XX_WHITE);
          tft.setTextColor(ST77XX_WHITE);
          tft.setCursor(58, 109);
          tft.print("Alarm");
        }
      } else {
        if(tempPrev != selectEdit){
          tft.fillRect(8, 33, 85, 40, ST77XX_BLACK);
          tft.drawRect(8, 33, 85, 40, ST77XX_WHITE);
          tft.drawRect(9, 34, 83, 38, ST77XX_WHITE);
          tft.setTextColor(ST77XX_WHITE);
          tft.setCursor(12, 65);
          tft.print("Time");
          tft.fillRect(53, 77, 100, 40, ST77XX_WHITE);         
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(58, 109);
          tft.print("Alarm");
        }
      }
      readButtons();
      if (curr[1] == 1 && prev[1] == 0){
        selectState = false;
      }
      vTaskDelay(5/portTICK_PERIOD_MS);
    }
    if (!selectEdit){

    } else {    
      while(editState&&!selectState){    

        readButtons();
        _select = map(analogRead(A0), 0, 4095, 0, 3);
        if (!drawn){
          tft.fillScreen(ST77XX_BLACK);
          tft.setFont(&FreeSans9pt7b);
          tft.setTextSize(1);
          tft.setCursor(16,26);
          tft.print("8:21 AM 4/30/24\n\n");
          tft.setCursor(6,80);
          tft.print("Edit:");
          tft.setFont(&FreeSans12pt7b);
          tft.setCursor(48, 65);
          tft.print("Min  Hour");
          tft.setCursor(46, 108);
          tft.print("Day  ");
          tft.setCursor(98, 108);
          tft.print("Mont");
          drawn = true;  
        } 
          switch (_select){
            case 0:
              tft.drawRect(44, 43, 46, 30, ST77XX_RED);
              tft.drawRect(95, 43, 58, 30, ST77XX_WHITE);
              tft.drawRect(44, 86, 46, 30, ST77XX_WHITE);
              tft.drawRect(95, 86, 58, 30, ST77XX_WHITE);
              break;
            case 1:
              tft.drawRect(44, 43, 46, 30, ST77XX_WHITE);
              tft.drawRect(95, 43, 58, 30, ST77XX_RED);
              tft.drawRect(44, 86, 46, 30, ST77XX_WHITE);
              tft.drawRect(95, 86, 58, 30, ST77XX_WHITE);
              break;
            case 2:
              tft.drawRect(44, 43, 46, 30, ST77XX_WHITE);
              tft.drawRect(95, 43, 58, 30, ST77XX_WHITE);
              tft.drawRect(44, 86, 46, 30, ST77XX_RED);
              tft.drawRect(95, 86, 58, 30, ST77XX_WHITE);
              break;
            case 3:
              tft.drawRect(44, 43, 46, 30, ST77XX_WHITE);
              tft.drawRect(95, 43, 58, 30, ST77XX_WHITE);
              tft.drawRect(44, 86, 46, 30, ST77XX_WHITE);
              tft.drawRect(95, 86, 58, 30, ST77XX_RED);
              break;
            default:
              break;
          }
        if (curr[1] == 1 && prev[1] == 0){ 
          drawn = false;     
          valState = true;
          vTaskDelay(100 / portTICK_PERIOD_MS);
          if (_select == 0){
            tft.fillScreen(ST77XX_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextSize(1);
            tft.setCursor(59,26);
            tft.print("Min");
            tft.setFont(&FreeSans24pt7b);
            tft.setTextSize(2);
            tft.setCursor(26, 105);
            tft.print(tempMin);
            while (valState){
              tempPrev = tempMin;
              tempMin = map(analogRead(A0), 0, 4095, 0, 60);
              if(tempPrev != tempMin){
                tft.fillRect(0,30,160,98,ST7735_BLACK);
                tft.setFont(&FreeSans24pt7b);
                tft.setTextSize(2);
                tft.setCursor(26, 105);
                tft.print(tempMin);
              }
              readButtons();
              vTaskDelay(5 / portTICK_PERIOD_MS);
              if(curr[1] == 1 && prev[1] == 0) valState = false;
            }
          } else if(_select == 1) {          
            tft.fillScreen(ST77XX_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextSize(1);
            tft.setCursor(56,26);
            tft.print("Hour");
            tft.setFont(&FreeSans24pt7b);
            tft.setTextSize(2);
            tft.setCursor(26, 105);
            tft.print(tempHour);
            while (valState){
              tempPrev = tempHour;            
              tempHour = map(analogRead(A0), 0, 4095, 0, 24);
              if (tempPrev != tempHour){   
                tft.fillRect(0,30,160,98,ST7735_BLACK);           
                tft.setFont(&FreeSans24pt7b);
                tft.setTextSize(2);
                tft.setCursor(26, 105);
                tft.print(tempHour);              
              }
              readButtons();
              vTaskDelay(5 / portTICK_PERIOD_MS);
              if(curr[1] == 1 && prev[1] == 0) valState = false;
            }
          } else if(_select == 2) {
            tft.fillScreen(ST77XX_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextSize(1);
            tft.setCursor(59,26);
            tft.print("Day");
            tft.setFont(&FreeSans24pt7b);
            tft.setTextSize(2);
            tft.setCursor(26, 105);
            tft.print(tempDay);
            while (valState){
              tempPrev = tempDay;
              tempDay = map(analogRead(A0), 0, 4095, 1, 31);
              if (tempPrev != tempDay){    
                tft.fillRect(0,30,160,98,ST7735_BLACK);          
                tft.setFont(&FreeSans24pt7b);
                tft.setTextSize(2);
                tft.setCursor(26, 105);
                tft.print(tempDay);
              }
              readButtons();
              vTaskDelay(5 / portTICK_PERIOD_MS);
              if(curr[1] == 1 && prev[1] == 0) valState = false;
            }        
          } else if(_select = 3){
            tft.fillScreen(ST77XX_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextSize(1);
            tft.setCursor(52,26);
            tft.print("Month");
            tft.setFont(&FreeSans24pt7b);
            tft.setTextSize(2);
            tft.setCursor(26, 105);
            tft.print(tempMonth);
            while (valState){
              tempPrev = tempMonth;
              tempMonth = map(analogRead(A0), 0, 4095, 1, 12);
              if (tempPrev != tempMonth){    
                tft.fillRect(0,30,160,98,ST7735_BLACK);  
                tft.setFont(&FreeSans24pt7b);
                tft.setTextSize(2);
                tft.setCursor(26, 105);
                tft.print(tempMonth);
              }
              readButtons();
              vTaskDelay(5 / portTICK_PERIOD_MS);
              if(curr[1] == 1 && prev[1] == 0) valState = false;
            }
          } else if(_select = 4){

          } else if(_select = 5){

          }      
        }

        if (curr[0] == 1 && prev[0] == 0){
          timeinfo.tm_year = 2024 - 1900;
          timeinfo.tm_mon = tempMonth - 1;
          timeinfo.tm_mday = tempDay;
          timeinfo.tm_hour = tempHour;
          timeinfo.tm_min = tempMin;
          time_t t = mktime(&timeinfo);
          printf("Setting time: %s", asctime(&timeinfo));
          struct timeval now = { .tv_sec = t };
          settimeofday(&now, NULL);
          
          updated = true;     
          editState = !editState;


        }
      }
    }
  } else {
    if (curr[0] == 1 && prev[0] == 0){
      editState = !editState;
    }
    if(updated){
      tft.fillScreen(ST77XX_BLACK);
      tft.setFont(&FreeSans18pt7b);
      tft.setTextSize(2);    
      tft.setCursor(-2,64);
      tft.print("06");    
      tft.setCursor(71,58);
      tft.print(":");
      tft.setCursor(83,64);
      tft.print("31");
      tft.setFont(&FreeSans24pt7b);
      tft.setTextSize(1);
      tft.setCursor(0,111);
      tft.print("PM");
      tft.setFont(&FreeSans12pt7b);
      tft.setTextSize(1);
      tft.setCursor(76,93);
      tft.print("Tue");
      tft.setCursor(76,113);
      tft.print("4/30/24");
    } else {
      
      Serial.println("not updated");
      tft.getTextBounds("not updated", 0, 0, &x, &y, &w, &h);
      tft.setCursor((160 - w)/2,(128 - h)/2);
      tft.print("not updated");
    }
  }
  
  vTaskDelay(10/ portTICK_PERIOD_MS);
}
