#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <WiFiAP.h>
#include <Time.h>
#include <Preferences.h>
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library for ST7735
#include <SPI.h>

#include <Fonts/FreeSans24pt7b.h>
#include <Fonts/FreeSans18pt7b.h>
#include <Fonts/FreeMono18pt7b.h>
#include <Fonts/FreeSans12pt7b.h>
#include <Fonts/FreeSans9pt7b.h>

#define TFT_RST 17
#define TFT_DC  16
#define TFT_CS  4

struct hc595{uint8_t data;  uint8_t latch; uint8_t clock;};

struct tm timeinfo;

Preferences pref;

AsyncWebServer server(80);

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

hc595 gridBox= {27,14,12};

const char* ssid = "Medbox";
const char* password = "123456789";

const char* PARAM_DATE = "date";
const char* PARAM_ALARM = "alarm";

const int buzzer = 25;

const int buttons[] = {15, 2};

const int dayAlarms[] = {
  0b00000001,0b01000000,0b00100000,0b00010000,0b00001000,0b00000100,0b00000010
};

const String months[] = {"Jan","Feb","Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};

const String wDays[] = {"Sun","Mon","Tue", "Wed", "Thu", "Fri", "Sat"};

bool editState, selectState, valState, alarmState, updated, editTime, editAlarm, toggleAlarm = false;

bool synced;

int selectEdit;

int lastAlarm, currentalarm = 0;

int _select, tempHour, tempMin, tempDay, tempMonth, tempYear, tempPrev, prevMin;
int m1, h1, m2, h2, m3, h3;
int prev[2], curr[2];

int numRan;

int16_t  x, y;
uint16_t w, h;

void ledPostion(int day, int whichalarm){
  digitalWrite(gridBox.data, LOW);
  switch (whichalarm){
    case 1:
      for (int i = 0; i < 16; i++){
        digitalWrite(gridBox.data, LOW);
        digitalWrite(gridBox.clock, HIGH);
        digitalWrite(gridBox.clock, LOW);
      }
      for(int i = 0; i < 8; i++){
        if ((bitRead(dayAlarms[day], i) == 1)){    
          digitalWrite(gridBox.data, HIGH);
        } else {
          digitalWrite(gridBox.data, LOW);
        }
        digitalWrite(gridBox.clock, HIGH);
        digitalWrite(gridBox.clock, LOW);
      }
      break;
    case 2:
      for (int i = 0; i < 8; i++){
        digitalWrite(gridBox.data, LOW);
        digitalWrite(gridBox.clock, HIGH);
        digitalWrite(gridBox.clock, LOW);
      }
      for(int i = 0; i < 8; i++){
        if ((bitRead(dayAlarms[day], i) == 1)){    
          digitalWrite(gridBox.data, HIGH);
        } else {
          digitalWrite(gridBox.data, LOW);
        }
        digitalWrite(gridBox.clock, HIGH);
        digitalWrite(gridBox.clock, LOW);
      }
      for (int i = 0; i < 8; i++){
        digitalWrite(gridBox.data, LOW);
        digitalWrite(gridBox.clock, HIGH);
        digitalWrite(gridBox.clock, LOW);
      }
      break;
    case 3:
      for(int i = 0; i < 8; i++){
        if ((bitRead(dayAlarms[day], i) == 1)){    
          digitalWrite(gridBox.data, HIGH);
        } else {
          digitalWrite(gridBox.data, LOW);
        }
        digitalWrite(gridBox.clock, HIGH);
        digitalWrite(gridBox.clock, LOW);
      }
      for (int i = 0; i < 16; i++){
        digitalWrite(gridBox.data, LOW);
        digitalWrite(gridBox.clock, HIGH);
        digitalWrite(gridBox.clock, LOW);
      }
      break;
    default:
      break;
  }
  digitalWrite(gridBox.latch, HIGH);
  digitalWrite(gridBox.latch, LOW);  
}

void timeScreen(bool _invert = false){
  if(!_invert){
    tft.setTextColor(ST7735_WHITE);   
    tft.fillScreen(ST77XX_BLACK);
  } else {
    tft.setTextColor(ST7735_BLACK);   
    tft.fillScreen(ST77XX_WHITE);
  }
  tft.setFont(&FreeSans18pt7b);           
  tft.setTextSize(2);    
  tft.setCursor(-2,64);
  tft.print((((timeinfo.tm_hour > 12 ? timeinfo.tm_hour - 12 : timeinfo.tm_hour)) < 10 ? "0" : ""));
  tft.print((timeinfo.tm_hour > 12 ? timeinfo.tm_hour - 12 : timeinfo.tm_hour));
  tft.setCursor(71,58);
  tft.print(":");
  tft.setCursor(83,64);
  tft.print((timeinfo.tm_min < 10 ? "0":""));
  tft.print(timeinfo.tm_min);
  tft.setFont(&FreeSans24pt7b);
  tft.setTextSize(1);
  tft.setCursor(0,111);
  tft.print((timeinfo.tm_hour >= 12 ? "PM" : "AM"));
  tft.setFont(&FreeSans12pt7b);
  tft.setTextSize(1);
  tft.setCursor(76,93);
  tft.print(wDays[timeinfo.tm_wday]);
  tft.setCursor(76,113);
  tft.print(timeinfo.tm_mon + 1);
  tft.print("/");
  tft.print(timeinfo.tm_mday);
  tft.print("/");
  tft.print(timeinfo.tm_year - 100);
}

void editTimeScreen(bool base){
  timeinfo.tm_year = 2024 - 1900;
  tft.fillScreen(ST77XX_BLACK);
  tft.setTextColor(ST77XX_WHITE);
  tft.setFont(&FreeSans12pt7b);
  tft.setTextSize(1);
  tft.setCursor(4,26);
  if (base){
    tft.print((timeinfo.tm_hour > 12 ? timeinfo.tm_hour - 12 : timeinfo.tm_hour));
    tft.print(":");
    tft.print((timeinfo.tm_min < 10 ? "0" : ""));
    tft.print(timeinfo.tm_min);
    tft.setFont(&FreeSans9pt7b);  
    tft.print((timeinfo.tm_hour >= 12 ? "PM" : "AM"));  
    tft.setCursor(88,26);  
    tft.print(timeinfo.tm_mon + 1);
    tft.print("/");
    tft.print(timeinfo.tm_mday);
    tft.print("/");
    tft.print(timeinfo.tm_year - 100);  
  } else {
    tft.print((tempHour > 12 ? tempHour - 12 : tempHour));
    tft.print(":");
    tft.print((tempMin < 10 ? "0" : ""));
    tft.print(tempMin);
    tft.setFont(&FreeSans9pt7b);  
    tft.print((tempHour >= 12 ? "PM" : "AM"));
    tft.setCursor(88,26);  
    tft.print(tempMonth);
    tft.print("/");
    tft.print(tempDay);
    tft.print("/");
    tft.print(tempYear);
  }
  tft.fillRect(0,30,160,120,ST7735_BLACK);
  tft.setFont(&FreeSans18pt7b);
  tft.setTextSize(1);
  tft.drawRect(6, 48, 63, 36, ST77XX_WHITE);  
  tft.setCursor(9, 78);
  tft.print("Min");
  tft.setTextColor(ST7735_WHITE);
  tft.fillRect(73, 48, 81, 36, ST77XX_BLACK);
  tft.drawRect(73, 48, 81, 36, ST77XX_WHITE);
  tft.setCursor(76, 78);
  tft.print("Hour"); 
  tft.setFont(&FreeSans12pt7b);
  tft.setCursor(84, 111);
  tft.print("Date");   
  tft.setFont(&FreeSans18pt7b);
  tft.setTextSize(1);
  tft.fillTriangle(138, 115, 138, 90, 154, 102, ST77XX_WHITE);
}

void temporary(){
  tempYear = timeinfo.tm_year - 100;
  tempHour = timeinfo.tm_hour;
  tempMonth = timeinfo.tm_mon + 1;
  tempMin = timeinfo.tm_min;
  tempDay = timeinfo.tm_mday;
}

void readButtons(){
  for (int i = 0; i < 2; i++)
    prev[i] = curr[i];
  for (int i = 0; i < 2; i++)
    curr[i] = digitalRead(buttons[i]);
}

void GetTime(void * param){
  while(1){
    if(updated){
      prevMin = timeinfo.tm_min;
      if (timeinfo.tm_hour == h1 && timeinfo.tm_min == m1){
        currentalarm = 1;
        if (lastAlarm != currentalarm){
          toggleAlarm = true;          
        }
        lastAlarm = currentalarm;
      } else if(timeinfo.tm_hour == h2 && timeinfo.tm_min == m2){
        currentalarm = 2;
        if (lastAlarm != currentalarm){
          toggleAlarm = true;          
        }
        lastAlarm = currentalarm;
      } else if(timeinfo.tm_hour == h3 && timeinfo.tm_min == m3){
        currentalarm = 3;
        if (lastAlarm != currentalarm){
          toggleAlarm = true;          
        }
        lastAlarm = currentalarm;
      }

      getLocalTime(&timeinfo);
    }
    vTaskDelay(1000/ portTICK_PERIOD_MS);
  }
}

void BuzzerAlarm(void * param){
  bool buzz;
  unsigned long tB;
  int counter = 0;
  while(1){
    if (toggleAlarm){
      if (millis() - tB >= 200){
        tB = millis();
        if(!buzz){
          digitalWrite(buzzer, HIGH);
        } else {
          digitalWrite(buzzer, LOW);
        }        
        if (counter > 12){
          buzz = true;
          if(counter > 18){
            buzz = false;
            counter = 0;
          }
        } else {
          buzz = !buzz;
        }
        counter++;
      }
    } else {
      digitalWrite(buzzer, LOW);
    }
    vTaskDelay(10 / portTICK_PERIOD_MS);
  }
}

void setup() {
  // put your setup code here, to run once:

  if (!WiFi.softAP(ssid, password)) {
    log_e("Soft AP creation failed.");
    while(1);
  }

  Serial.begin(115200);
  for (int i = 0; i < 2; i++)
    pinMode(buttons[i], INPUT_PULLDOWN);
  
  pinMode(buzzer, OUTPUT);
  pinMode(gridBox.data, OUTPUT);
  pinMode(gridBox.clock, OUTPUT);
  pinMode(gridBox.latch, OUTPUT);
  
  pref.begin("Time", false);

  m1 = pref.getInt("M1");
  h1 = pref.getInt("H1");
  m2 = pref.getInt("M2");
  h2 = pref.getInt("H2");
  m3 = pref.getInt("M3");
  h3 = pref.getInt("H3");

  timeinfo.tm_year = pref.getInt("Year");
  timeinfo.tm_mon = pref.getInt("Month");
  timeinfo.tm_mday = pref.getInt("Day");
  timeinfo.tm_hour = pref.getInt("Hour");
  timeinfo.tm_min = pref.getInt("Min");

  time_t t = mktime(&timeinfo);
  printf("Setting time: %s", asctime(&timeinfo));
  struct timeval now = { .tv_sec = t };
  settimeofday(&now, NULL);

  updated = true; 

  tft.initR(INITR_BLACKTAB);
  tft.setTextWrap(true);
  tft.setRotation(tft.getRotation()+1);
  tft.setTextColor(ST77XX_WHITE);
  tft.fillScreen(ST77XX_BLACK);

   server.on("/synced", HTTP_GET,
    [](AsyncWebServerRequest *request) {
      request->send_P(200, "text/plain", (synced ? "synced":" "));
    }
   );

  server.on("/date", HTTP_GET,
    [](AsyncWebServerRequest *request) {
      String date;
      if (request->hasParam(PARAM_DATE)) {
        date = request->getParam(PARAM_DATE)->value();
        Serial.println(date+"  min ->" + date.substring(14, 16));        
        timeinfo.tm_year = date.substring(6, 10).toInt() - 1900;
        timeinfo.tm_mon = date.substring(0, 2).toInt() - 1;
        timeinfo.tm_mday = date.substring(3, 5).toInt();      
        timeinfo.tm_hour = date.substring(11, 13).toInt();
        timeinfo.tm_min = date.substring(14, 16).toInt();
        timeinfo.tm_sec = date.substring(17, 19).toInt();
        Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
        time_t t = mktime(&timeinfo);
        printf("Setting time: %s", asctime(&timeinfo));
        struct timeval now = { .tv_sec = t };
        settimeofday(&now, NULL);  
        synced = true;   
        prevMin = 99;
        request->send_P(200, "text/plain", "synced");
      }
    }
  );

  server.on("/get", HTTP_GET, 
    [](AsyncWebServerRequest *request) {
      String alarm;
      String sendAlarm = "";
      if (request->hasParam(PARAM_ALARM) ) {
        numRan = random(100);
        alarm = request->getParam(PARAM_ALARM)->value();
        Serial.println(alarm);
        if (alarm.substring(0,1) == "1"){
          sendAlarm = "";
          sendAlarm += h1;
          sendAlarm += ":";
          sendAlarm += (m1 > 9 ? "" : "0");
          sendAlarm += m1;
          sendAlarm += (h1 >= 12 ? " PM":" AM");
        } else if (alarm.substring(0,1) == "2"){
          sendAlarm = "";
          sendAlarm +=(h2 > 12 ? h2 - 12 : h2);              
          sendAlarm += ":";
          sendAlarm += (m2 > 9 ? "" : "0");
          sendAlarm += m2;  
          sendAlarm += (h2 >= 12 ? " PM":" AM");
        } else if (alarm.substring(0,1) == "3"){
          sendAlarm = "";
          sendAlarm +=(h3 > 12 ? h3 - 12 : h3);            
          sendAlarm += ":";
          sendAlarm += (m3 > 9 ? "" : "0");
          sendAlarm += m3;  
          sendAlarm += (h3 >= 12 ? " PM":" AM");
          sendAlarm += numRan;  
        }
        request->send(200, "text/plain", sendAlarm);
      }
    }
  );

  server.on("/set", HTTP_GET, 
    [](AsyncWebServerRequest *request) {
      String alarm;      
      if (request->hasParam(PARAM_ALARM) ) {
        alarm = request->getParam(PARAM_ALARM)->value();
        Serial.println(alarm);
        if (alarm.substring(0,1) == "1"){
          h1 = alarm.substring(1,3).toInt();
          m1 = alarm.substring(4,6).toInt();
          pref.putInt("M1",m1);
          pref.putInt("H1",h1);
          Serial.print(h1);
          Serial.println(m1);
        } else if (alarm.substring(0,1) == "2"){
          h2 = alarm.substring(1,3).toInt();
          m2 = alarm.substring(4,6).toInt();
          pref.putInt("M2",m2);
          pref.putInt("H2",h2);
          Serial.print(h2);
          Serial.println(m2);
        } else if (alarm.substring(0,1) == "3"){
          h3 = alarm.substring(1,3).toInt();
          m3 = alarm.substring(4,6).toInt();
          pref.putInt("M3",m3);
          pref.putInt("H3",h3);
          Serial.print(h3);
          Serial.println(m3);
        }        
      }
    }
  );

  timeScreen();
  for (int i = 0; i < 24; i++){
    digitalWrite(gridBox.data, LOW);
    digitalWrite(gridBox.clock, HIGH);
    digitalWrite(gridBox.clock, LOW);
  }
  digitalWrite(gridBox.latch, HIGH);
  digitalWrite(gridBox.latch, LOW);

  xTaskCreatePinnedToCore(
    GetTime,
    "Get Time",
    8000,
    NULL,
    2,
    NULL,
    0
  );
  xTaskCreatePinnedToCore(
    BuzzerAlarm,
    "Buzzer Alarm",
    8000,
    NULL,
    2,
    NULL,
    0
  );

  server.begin();

  Serial.print("IP Address: ");
  Serial.println( WiFi.softAPIP());
}

bool drawn = false, blink;
unsigned long t0;
void loop() {
  
  // put your main code here, to run repeatedly:
  readButtons();
  if (editState){
    selectState = true;
    tft.setTextColor(ST7735_WHITE);   
    tft.fillScreen(ST77XX_BLACK);
    tft.setFont(&FreeSans12pt7b);
    tft.setTextSize(1);
    tft.setCursor(56,26);
    tft.print("Edit");
    tft.setFont(&FreeSans18pt7b);        
    tft.drawRect(8, 33, 85, 40, ST77XX_WHITE);
    tft.drawRect(9, 34, 83, 38, ST77XX_WHITE);
    tft.setTextColor(ST77XX_WHITE);
    tft.setCursor(12, 65);
    tft.print("Time");    
    tft.drawRect(53, 77, 100, 40, ST77XX_WHITE);
    tft.drawRect(54, 78, 98, 38, ST77XX_WHITE);
    tft.setTextColor(ST77XX_WHITE);
    tft.setCursor(58, 109);
    tft.print("Alarm");

    while(selectState){
      tempPrev = selectEdit;
      selectEdit = map(analogRead(A0), 0, 4095, 0, 1);
      if (analogRead(A0) >= 0 && analogRead(A0) <= 2047){
        selectEdit = 0;
      } else if(analogRead(A0) >= 2048 && analogRead(A0) <= 4095) {
        selectEdit = 1;        
      }
      // Serial.println(analogRead(A0));         
      if(selectEdit == 0){
        if(tempPrev != selectEdit){
          tft.fillRect(8, 33, 85, 40, ST77XX_WHITE);
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(12, 65);
          tft.print("Time");
          tft.fillRect(53, 77, 100, 40, ST77XX_BLACK);         
          tft.drawRect(53, 77, 100, 40, ST77XX_WHITE);
          tft.drawRect(54, 78, 98, 38, ST77XX_WHITE);
          tft.setTextColor(ST77XX_WHITE);
          tft.setCursor(58, 109);
          tft.print("Alarm");
        } else  {
          if(millis() - t0 >= 500){
            t0 = millis();
            if (blink){
              tft.fillRect(8, 33, 85, 40, ST77XX_WHITE);
              tft.setTextColor(ST77XX_BLACK);
              tft.setCursor(12, 65);
              tft.print("Time");
              tft.setTextColor(ST7735_WHITE); 
            } else {
              tft.fillRect(8, 33, 85, 40, ST77XX_BLACK);
              tft.drawRect(8, 33, 85, 40, ST77XX_WHITE);
              tft.drawRect(9, 34, 83, 38, ST77XX_WHITE);
              tft.setTextColor(ST77XX_WHITE);
              tft.setCursor(12, 65);
              tft.print("Time");
            }
            blink = !blink;
          }
        }
      } else if(selectEdit == 1) {
        if(tempPrev != selectEdit){
          tft.fillRect(8, 33, 85, 40, ST77XX_BLACK);
          tft.drawRect(8, 33, 85, 40, ST77XX_WHITE);
          tft.drawRect(9, 34, 83, 38, ST77XX_WHITE);
          tft.setTextColor(ST77XX_WHITE);
          tft.setCursor(12, 65);
          tft.print("Time");
          tft.fillRect(53, 77, 100, 40, ST77XX_WHITE);         
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(58, 109);
          tft.print("Alarm");
        } else {
          if(millis() - t0 >= 500){
            t0 = millis();
            if (blink){
              tft.fillRect(53, 77, 100, 40, ST77XX_WHITE);         
              tft.setTextColor(ST77XX_BLACK);
              tft.setCursor(58, 109);
              tft.print("Alarm");
              tft.setTextColor(ST7735_WHITE); 
            } else {
              tft.fillRect(53, 77, 100, 40, ST77XX_BLACK);         
              tft.drawRect(53, 77, 100, 40, ST77XX_WHITE);
              tft.drawRect(54, 78, 98, 38, ST77XX_WHITE);
              tft.setTextColor(ST77XX_WHITE);
              tft.setCursor(58, 109);
              tft.print("Alarm");
            }
            blink = !blink;
          }
        }
      }
      readButtons();
      if (curr[1] == 1 && prev[1] == 0){
        tempPrev = 99;
        selectState = false;
        vTaskDelay(150/portTICK_PERIOD_MS);

      } else if(curr[0] == 1 && prev[0] == 0){
        selectState = _select = tempPrev = editState  = alarmState = selectState = valState = 0;    
        selectEdit= 3;        
        editState = false;        
        curr[0] = prev[0];
        tempPrev = 99;
        
        timeScreen();
        vTaskDelay(150/portTICK_PERIOD_MS);

      }
      vTaskDelay(5/portTICK_PERIOD_MS);
    }
    if (selectEdit == 1){            
      tft.setTextColor(ST77XX_WHITE);
      tft.fillScreen(ST77XX_BLACK);
      tft.setFont(&FreeSans12pt7b);
      tft.setTextSize(1);
      tft.setCursor(48,26);
      tft.print("Alarm");
      prevMin = 80;

//////      
      while(editState && !selectState){
        readButtons();
        tempPrev = _select;
        _select = map(analogRead(A0), 0, 4095, 0, 2);
        switch (_select){
        case 0:
          if (tempPrev != _select ){
            for (int i = 0; i < 16; i++){
              digitalWrite(gridBox.data, LOW);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            for (int i = 0; i < 8; i++){
              digitalWrite(gridBox.data, HIGH);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            digitalWrite(gridBox.latch, HIGH);
            digitalWrite(gridBox.latch, LOW);

            tft.setTextColor(ST77XX_WHITE);
            tft.fillRect(0,30,160,98,ST7735_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextSize(1);
            tft.setCursor(36,58);
            tft.print(h1);
            tft.print(":");
            tft.print((m1 > 9 ? "" : "0"));
            tft.print(m1);
            tft.setCursor(87,58);            
            tft.print("AM");
            tft.setCursor(87,58);            
            tft.print("AM");
            tft.setFont(&FreeSans24pt7b);  
            tft.setCursor(26, 105);
            tft.print("Morn");
            tft.fillTriangle(138, 105, 138, 80, 154, 92, ST77XX_WHITE);
          } else {
            if(millis() - t0 >= 500){
              t0 = millis();
              if (blink){
                tft.fillTriangle(138, 105, 138, 80, 154, 92, ST77XX_WHITE);
                for (int i = 0; i < 16; i++){
                  digitalWrite(gridBox.data, LOW);
                  digitalWrite(gridBox.clock, HIGH);
                  digitalWrite(gridBox.clock, LOW);
                }
                for (int i = 0; i < 8; i++){
                  digitalWrite(gridBox.data, HIGH);
                  digitalWrite(gridBox.clock, HIGH);
                  digitalWrite(gridBox.clock, LOW);
                }
                digitalWrite(gridBox.latch, HIGH);
                digitalWrite(gridBox.latch, LOW);                
              } else {
                tft.fillTriangle(138, 105, 138, 80, 154, 92, ST77XX_BLACK);                
                for (int i = 0; i < 24; i++){
                  digitalWrite(gridBox.data, LOW);
                  digitalWrite(gridBox.clock, HIGH);
                  digitalWrite(gridBox.clock, LOW);
                }
                digitalWrite(gridBox.latch, HIGH);
                digitalWrite(gridBox.latch, LOW);
              }
              blink = !blink;
            }
          }
          break;
        case 1:
          if (tempPrev != _select){
            for (int i = 0; i < 8; i++){
              digitalWrite(gridBox.data, LOW);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            for (int i = 0; i < 8; i++){
              digitalWrite(gridBox.data, HIGH);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            for (int i = 0; i < 8; i++){
              digitalWrite(gridBox.data, LOW);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            digitalWrite(gridBox.latch, HIGH);
            digitalWrite(gridBox.latch, LOW);
            tft.setTextColor(ST77XX_WHITE);
            tft.fillRect(0,30,160,98,ST7735_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextSize(1);
            tft.setCursor(36,58);
            tft.print((h2 > 12 ? h2 - 12 : h2));                
            tft.print(":");
            tft.print((m2 > 9 ? "" : "0"));
            tft.print(m2);
            tft.setCursor(93,58);            
            tft.print((h2 >= 12 ? "PM":"AM"));
            tft.setFont(&FreeSans24pt7b);  
            tft.setCursor(26, 105);
            tft.print("Noon");
            tft.fillTriangle(22, 105, 22, 80, 6, 92, ST77XX_WHITE);
            tft.fillTriangle(138, 105, 138, 80, 154, 92, ST77XX_WHITE);
          } else {
            if(millis() - t0 >= 500){
              t0 = millis();
              if (blink){
                tft.fillTriangle(138, 105, 138, 80, 154, 92, ST77XX_WHITE);
                tft.fillTriangle(22, 105, 22, 80, 6, 92, ST77XX_WHITE);
                for (int i = 0; i < 8; i++){
                  digitalWrite(gridBox.data, LOW);
                  digitalWrite(gridBox.clock, HIGH);
                  digitalWrite(gridBox.clock, LOW);
                }
                for (int i = 0; i < 8; i++){
                  digitalWrite(gridBox.data, HIGH);
                  digitalWrite(gridBox.clock, HIGH);
                  digitalWrite(gridBox.clock, LOW);
                }
                for (int i = 0; i < 8; i++){
                  digitalWrite(gridBox.data, LOW);
                  digitalWrite(gridBox.clock, HIGH);
                  digitalWrite(gridBox.clock, LOW);
                }
                digitalWrite(gridBox.latch, HIGH);
                digitalWrite(gridBox.latch, LOW);
              } else {
                tft.fillTriangle(138, 105, 138, 80, 154, 92, ST77XX_BLACK);
                tft.fillTriangle(22, 105, 22, 80, 6, 92, ST77XX_BLACK);
                for (int i = 0; i < 24; i++){
                  digitalWrite(gridBox.data, LOW);
                  digitalWrite(gridBox.clock, HIGH);
                  digitalWrite(gridBox.clock, LOW);
                }
                digitalWrite(gridBox.latch, HIGH);
                digitalWrite(gridBox.latch, LOW);
              }
              blink = !blink;
            }
          }
          break;
        case 2:
          if (tempPrev != _select){
            for (int i = 0; i < 8; i++){
              digitalWrite(gridBox.data, HIGH);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            for (int i = 0; i < 16; i++){
              digitalWrite(gridBox.data, LOW);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            digitalWrite(gridBox.latch, HIGH);
            digitalWrite(gridBox.latch, LOW);
            tft.setTextColor(ST77XX_WHITE);
            tft.fillRect(0,30,160,98,ST7735_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextSize(1);
            tft.setCursor(36,58);
            tft.print((h3 > 12 ? h3 - 12 : h3));    
            tft.print(":");
            tft.print((m3 > 9 ? "" : "0"));
            tft.print(m3);
            tft.setCursor(94,58);            
            tft.print("PM");
            tft.setFont(&FreeSans24pt7b);  
            tft.setCursor(26, 105);
            tft.print("Night");
            tft.fillTriangle(22, 105, 22, 80, 6, 92, ST77XX_WHITE);
          } else {
            if(millis() - t0 >= 500){
              t0 = millis();
              if (blink){               
                tft.fillTriangle(22, 105, 22, 80, 6, 92, ST77XX_WHITE);
                for (int i = 0; i < 8; i++){
                  digitalWrite(gridBox.data, HIGH);
                  digitalWrite(gridBox.clock, HIGH);
                  digitalWrite(gridBox.clock, LOW);
                }
                for (int i = 0; i < 16; i++){
                  digitalWrite(gridBox.data, LOW);
                  digitalWrite(gridBox.clock, HIGH);
                  digitalWrite(gridBox.clock, LOW);
                  
                }
                digitalWrite(gridBox.latch, HIGH);
                digitalWrite(gridBox.latch, LOW);
              } else {                
                tft.fillTriangle(22, 105, 22, 80, 6, 92, ST77XX_BLACK);
                for (int i = 0; i < 24; i++){
                  digitalWrite(gridBox.data, LOW);
                  digitalWrite(gridBox.clock, HIGH);
                  digitalWrite(gridBox.clock, LOW);
                }
                digitalWrite(gridBox.latch, HIGH);
                digitalWrite(gridBox.latch, LOW);
              }
              blink = !blink;
            }
          }
          break;          
        default:
          break;
        }
        if (curr[1] == 1 && prev[1] == 0){            
          tempPrev = 99;    
          alarmState = true;        
          if (_select == 0){
            for (int i = 0; i < 16; i++){
              digitalWrite(gridBox.data, LOW);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            for (int i = 0; i < 8; i++){
              digitalWrite(gridBox.data, HIGH);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }            
            digitalWrite(gridBox.latch, HIGH);
            digitalWrite(gridBox.latch, LOW);
            tft.fillRect(0,60,160,120,ST7735_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.fillRect(0,0,160,30,ST7735_WHITE);
            tft.setTextColor(ST77XX_BLACK);           
            tft.setTextSize(1);
            tft.setCursor(36,24);
            tft.print("Morning");
            tft.setTextColor(ST77XX_WHITE);         
            tft.setFont(&FreeSans18pt7b);
            tft.setTextSize(1);            
            tft.drawRect(6, 78, 63, 36, ST77XX_WHITE);
            tft.setCursor(9, 108);
            tft.print("Min  ");  
            tft.drawRect(73, 78, 81, 36, ST77XX_WHITE);
            tft.setCursor(76, 108);
            tft.print("Hour");

////////////MORNING
            while(alarmState){
              if (!drawn){
                tft.fillScreen(ST77XX_BLACK);
                tft.setFont(&FreeSans12pt7b);
                tft.fillRect(0,0,160,30,ST7735_WHITE);
                tft.setTextColor(ST77XX_BLACK);           
                tft.setTextSize(1);
                tft.setCursor(36,24);
                tft.print("Morning");
                tft.setTextColor(ST77XX_WHITE);           
                tft.fillRect(0,30,160,98,ST7735_BLACK);
                tft.setFont(&FreeSans12pt7b);
                tft.setTextSize(1);
                tft.setCursor(36,58);
                tft.print(h1);
                tft.print(":");
                tft.print((m1 > 9 ? "" : "0"));
                tft.print(m1);
                tft.setCursor(87,58);            
                tft.print("AM");
                tft.setFont(&FreeSans18pt7b);
                tft.setTextSize(1);            
                tft.drawRect(6, 78, 63, 36, ST77XX_WHITE);
                tft.setCursor(9, 108);
                tft.print("Min  ");  
                tft.drawRect(73, 78, 81, 36, ST77XX_WHITE);
                tft.setCursor(76, 108);
                tft.print("Hour");
                
                drawn = true;
              }
              readButtons();
              tempPrev = _select;
              _select = map(analogRead(A0), 0, 4095, 0, 1);
              if (_select == 1){
                if (tempPrev != _select){
                  tft.setTextColor(ST77XX_WHITE);
                  tft.fillRect(6, 78, 63, 36, ST77XX_BLACK);                  
                  tft.drawRect(6, 78, 63, 36, ST77XX_WHITE);                  
                  tft.setCursor(9, 108);
                  tft.print("Min  ");
                  tft.setTextColor(ST77XX_BLACK);
                  tft.fillRect(73, 78, 81, 36, ST77XX_WHITE);
                  tft.setCursor(76, 108);
                  tft.print("Hour");
                } else {
                  if(millis() - t0 >= 500){
                    t0 = millis();
                    if (blink){               
                      tft.setTextColor(ST77XX_BLACK);
                      tft.fillRect(73, 78, 81, 36, ST77XX_WHITE);
                      tft.setCursor(76, 108);
                      tft.print("Hour");
                      tft.setTextColor(ST77XX_WHITE); 
                    } else {                
                      tft.setTextColor(ST77XX_WHITE);
                      tft.fillRect(73, 78, 81, 36, ST77XX_BLACK);
                      tft.drawRect(73, 78, 81, 36, ST77XX_WHITE);
                      tft.setCursor(76, 108);
                      tft.print("Hour");
                    }
                    blink = !blink;
                  }
                }
              } else if (_select ==0){
                if (tempPrev != _select){
                  tft.fillRect(6, 78, 63, 36, ST77XX_WHITE);                  
                  tft.setTextColor(ST77XX_BLACK);
                  tft.setCursor(9, 108);
                  tft.print("Min  ");
                  tft.setTextColor(ST77XX_WHITE);
                  tft.fillRect(73, 78, 81, 36, ST77XX_BLACK);
                  tft.drawRect(73, 78, 81, 36, ST77XX_WHITE);
                  tft.setCursor(76, 108);
                  tft.print("Hour");
                }  else {
                  if(millis() - t0 >= 500){
                    t0 = millis();
                    if (blink){               
                      tft.fillRect(6, 78, 63, 36, ST77XX_WHITE);                  
                      tft.setTextColor(ST77XX_BLACK);
                      tft.setCursor(9, 108);
                      tft.print("Min  ");
                      tft.setTextColor(ST77XX_WHITE);
                    } else {                
                      tft.setTextColor(ST77XX_WHITE);
                      tft.fillRect(6, 78, 63, 36, ST77XX_BLACK);                  
                      tft.drawRect(6, 78, 63, 36, ST77XX_WHITE);                  
                      tft.setCursor(9, 108);
                      tft.print("Min  ");
                    }
                    blink = !blink;
                  }
                }                 
              }
              if (curr[1] == 1 && prev[1] == 0){  
                curr[1] = prev[1];
                tempPrev = 99;               
                vTaskDelay(150 / portTICK_PERIOD_MS);     
                valState = true;
                tft.setTextColor(ST7735_WHITE);           
                if(_select == 0){                   
                  tft.fillScreen(ST77XX_BLACK);
                  tft.setFont(&FreeSans12pt7b);
                  tft.setTextSize(1);
                  tft.setCursor(59,26);
                  tft.print("Min");
                  tft.setFont(&FreeSans24pt7b);
                  tft.setTextSize(2);
                  tft.setCursor(26, 105);
                  tft.print(tempMin);
//////////////////MORN_MIN
                  while (valState){
                    tempPrev = tempMin;
                    tempMin = map(analogRead(A0), 0, 4095, 0, 59);
                    if(tempPrev != tempMin){
                      tft.fillRect(0,30,160,98,ST7735_BLACK);
                      tft.setFont(&FreeSans24pt7b);
                      tft.setTextSize(2);
                      if (tempMin < 10){
                        tft.setCursor(54, 105);
                      } else {
                        tft.setCursor(26, 105);
                      }
                      tft.print(tempMin);
                    }
                    readButtons();
                    vTaskDelay(5 / portTICK_PERIOD_MS);
                    if(curr[1] == 1 && prev[1] == 0) {
                      curr[1] = prev[1];
                      tempPrev = 99;
                      m1 = tempMin;
                      valState = false;
                      vTaskDelay(150 / portTICK_PERIOD_MS);
                    } else if(curr[0] == 1 && prev[0] == 0) {
                      tempPrev = 99;
                      valState = false;
                      curr[0] = prev[0] = 0;
                      vTaskDelay(150 / portTICK_PERIOD_MS);
                    }
                  }
                } else if (_select == 1){
                  tft.fillScreen(ST77XX_BLACK);
                  tft.setFont(&FreeSans12pt7b);
                  tft.setTextSize(1);
                  tft.setCursor(56,26);
                  tft.print("Hour");
                  tft.setFont(&FreeSans24pt7b);
                  tft.setTextSize(2);
                  tft.setCursor(26, 105);
                  tft.print(tempHour);
//////////////////MORN_HOUR
                  while (valState){
                    tempPrev = tempHour;            
                    tempHour = map(analogRead(A0), 0, 4095, 0, 8);
                    if (tempPrev != tempHour){   
                      tft.fillRect(0,30,160,98,ST7735_BLACK);           
                      tft.setFont(&FreeSans24pt7b);
                      tft.setTextSize(2);
                      if ((tempHour > 12 ? tempHour - 12 : tempHour) < 10){
                        tft.setCursor(54, 105);
                      } else {
                        tft.setCursor(26, 105);
                      }
                      tft.print((tempHour > 12 ? tempHour - 12 : tempHour));
                      tft.setFont(&FreeSans12pt7b);
                      tft.setTextSize(1);
                      tft.setCursor(139, 65);
                      tft.print("A");
                      tft.setCursor(136, 99);
                      tft.print("M");
                    }
                    readButtons();
                    vTaskDelay(5 / portTICK_PERIOD_MS);
                    if(curr[1] == 1 && prev[1] == 0) {
                      curr[1] = prev[1];
                      tempPrev = 99;
                      h1 = tempHour;
                      valState = false;
                      vTaskDelay(150 / portTICK_PERIOD_MS);
                    } else if(curr[0] == 1 && prev[0] == 0) {
                      tempPrev = 99;
                      valState = false;
                      curr[0] = prev[0];
                      vTaskDelay(150 / portTICK_PERIOD_MS);
                    }
                  }
                }
                drawn = false;
              }
              if (curr[0] == 1 && prev[0] == 0){
                alarmState = valState = 0;
                Serial.println("morning back button");
                pref.putInt("M1", m1);
                pref.putInt("H1", h1);
                curr[0] = prev[0] = 0;
                tft.setTextColor(ST77XX_WHITE);
                tft.fillScreen(ST77XX_BLACK);
                tft.setFont(&FreeSans12pt7b);
                tft.setTextSize(1);
                tft.setCursor(48,26);
                tft.print("Alarm");
                tft.setTextColor(ST77XX_WHITE);
                tft.fillRect(0,30,160,98,ST7735_BLACK);
                tft.setFont(&FreeSans12pt7b);
                tft.setTextSize(1);
                tft.setCursor(36,58);
                tft.print(h1);
                tft.print(":");
                tft.print((m1 > 9 ? "" : "0"));
                tft.print(m1);
                tft.setCursor(87,58);            
                tft.print("AM");
                tft.setCursor(87,58);            
                tft.print("AM");
                tft.setFont(&FreeSans24pt7b);  
                tft.setCursor(26, 105);
                tft.print("Morn");
                _select = 3;
                vTaskDelay(150 / portTICK_PERIOD_MS);
              }
            }            
          } else if (_select == 1){
            for (int i = 0; i < 8; i++){
              digitalWrite(gridBox.data, LOW);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            for (int i = 0; i < 8; i++){
              digitalWrite(gridBox.data, HIGH);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            for (int i = 0; i < 8; i++){
              digitalWrite(gridBox.data, LOW);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            digitalWrite(gridBox.latch, HIGH);
            digitalWrite(gridBox.latch, LOW);
            tft.fillRect(0,60,160,120,ST7735_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.fillRect(0,0,160,30,ST7735_WHITE);
            tft.setTextColor(ST77XX_BLACK);           
            tft.setTextSize(1);
            tft.setCursor(48,24);
            tft.print("Noon");
            tft.setTextColor(ST77XX_WHITE); 
            tft.setTextColor(ST77XX_WHITE);         
            tft.setFont(&FreeSans18pt7b);
            tft.setTextSize(1);            
            tft.drawRect(6, 78, 63, 36, ST77XX_WHITE);
            tft.setCursor(9, 108);
            tft.print("Min  ");  
            tft.drawRect(73, 78, 81, 36, ST77XX_WHITE);
            tft.setCursor(76, 108);
            tft.print("Hour");

////////////NOON!
            while(alarmState){
              if (!drawn){
                tft.fillScreen(ST77XX_BLACK);
                tft.setFont(&FreeSans12pt7b);
                tft.fillRect(0,0,160,30,ST7735_WHITE);
                tft.setTextColor(ST77XX_BLACK);           
                tft.setTextSize(1);
                tft.setCursor(48,24);
                tft.print("Noon");
                tft.setTextColor(ST77XX_WHITE);           
                tft.fillRect(0,30,160,98,ST7735_BLACK);
                tft.setFont(&FreeSans12pt7b);
                tft.setTextSize(1);
                tft.setCursor(36,58);
                tft.print((h2 > 12 ? h2 - 12 : h2));                
                tft.print(":");
                tft.print((m2 > 9 ? "" : "0"));
                tft.print(m2);
                tft.setCursor(93,58);            
                tft.print((h2 >= 12 ? "PM":"AM"));
                tft.setFont(&FreeSans18pt7b);
                tft.setTextSize(1);            
                tft.drawRect(6, 78, 63, 36, ST77XX_WHITE);
                tft.setCursor(9, 108);
                tft.print("Min  ");  
                tft.drawRect(73, 78, 81, 36, ST77XX_WHITE);
                tft.setCursor(76, 108);
                tft.print("Hour");
                
                drawn = true;
              }
              readButtons();
              tempPrev = _select;
              _select = map(analogRead(A0), 0, 4095, 0, 1);
              if (_select == 1){
                if (tempPrev != _select){
                  tft.setTextColor(ST77XX_WHITE);
                  tft.fillRect(6, 78, 63, 36, ST77XX_BLACK);                  
                  tft.drawRect(6, 78, 63, 36, ST77XX_WHITE);                  
                  tft.setCursor(9, 108);
                  tft.print("Min  ");
                  tft.setTextColor(ST77XX_BLACK);
                  tft.fillRect(73, 78, 81, 36, ST77XX_WHITE);
                  tft.setCursor(76, 108);
                  tft.print("Hour");
                } else {
                  if(millis() - t0 >= 500){
                    t0 = millis();
                    if (blink){               
                      tft.setTextColor(ST77XX_BLACK);
                      tft.fillRect(73, 78, 81, 36, ST77XX_WHITE);
                      tft.setCursor(76, 108);
                      tft.print("Hour");
                      tft.setTextColor(ST77XX_WHITE); 
                    } else {                
                      tft.setTextColor(ST77XX_WHITE);
                      tft.fillRect(73, 78, 81, 36, ST77XX_BLACK);
                      tft.drawRect(73, 78, 81, 36, ST77XX_WHITE);
                      tft.setCursor(76, 108);
                      tft.print("Hour");
                    }
                    blink = !blink;
                  }
                }
              } else if (_select ==0){
                if (tempPrev != _select){
                  tft.fillRect(6, 78, 63, 36, ST77XX_WHITE);                  
                  tft.setTextColor(ST77XX_BLACK);
                  tft.setCursor(9, 108);
                  tft.print("Min  ");
                  tft.setTextColor(ST77XX_WHITE);
                  tft.fillRect(73, 78, 81, 36, ST77XX_BLACK);
                  tft.drawRect(73, 78, 81, 36, ST77XX_WHITE);
                  tft.setCursor(76, 108);
                  tft.print("Hour");
                }  else {
                  if(millis() - t0 >= 500){
                    t0 = millis();
                    if (blink){               
                      tft.fillRect(6, 78, 63, 36, ST77XX_WHITE);                  
                      tft.setTextColor(ST77XX_BLACK);
                      tft.setCursor(9, 108);
                      tft.print("Min  ");
                      tft.setTextColor(ST77XX_WHITE);
                    } else {                
                      tft.setTextColor(ST77XX_WHITE);
                      tft.fillRect(6, 78, 63, 36, ST77XX_BLACK);                  
                      tft.drawRect(6, 78, 63, 36, ST77XX_WHITE);                  
                      tft.setCursor(9, 108);
                      tft.print("Min  ");
                    }
                    blink = !blink;
                  }
                }                 
              }
              if (curr[1] == 1 && prev[1] == 0){  
                curr[1] = prev[1];
                tempPrev = 99;                
                vTaskDelay(150 / portTICK_PERIOD_MS);    
                valState = true;
                tft.setTextColor(ST7735_WHITE);           
                if(_select == 0){                   
                  tft.fillScreen(ST77XX_BLACK);
                  tft.setFont(&FreeSans12pt7b);
                  tft.setTextSize(1);
                  tft.setCursor(59,26);
                  tft.print("Min");
                  tft.setFont(&FreeSans24pt7b);
                  tft.setTextSize(2);
                  tft.setCursor(26, 105);
                  tft.print(tempMin);
//////////////////NOON_MIN
                  while (valState){
                    tempPrev = tempMin;
                    tempMin = map(analogRead(A0), 0, 4095, 0, 59);
                    if(tempPrev != tempMin){
                      tft.fillRect(0,30,160,98,ST7735_BLACK);
                      tft.setFont(&FreeSans24pt7b);
                      tft.setTextSize(2);
                      if (tempMin < 10){
                        tft.setCursor(54, 105);
                      } else {
                        tft.setCursor(26, 105);
                      }
                      tft.print(tempMin);
                    }
                    readButtons();
                    vTaskDelay(5 / portTICK_PERIOD_MS);
                    if(curr[1] == 1 && prev[1] == 0) {
                      curr[1] = prev[1];
                      tempPrev = 99;
                      m2 = tempMin;
                      valState = false;
                      vTaskDelay(150 / portTICK_PERIOD_MS);
                    } else if(curr[0] == 1 && prev[0] == 0) {
                      tempPrev = 99;
                      temporary();
                      valState = false;
                      curr[0] = prev[0];
                      vTaskDelay(150 / portTICK_PERIOD_MS);
                    }
                  }
                } else if (_select == 1){
                  tft.fillScreen(ST77XX_BLACK);
                  tft.setFont(&FreeSans12pt7b);
                  tft.setTextSize(1);
                  tft.setCursor(56,26);
                  tft.print("Hour");
                  tft.setFont(&FreeSans24pt7b);
                  tft.setTextSize(2);
                  tft.setCursor(26, 105);
                  tft.print(tempHour);
//////////////////NOON_HOUR
                  while (valState){
                    tempPrev = tempHour;            
                    tempHour = map(analogRead(A0), 0, 4095, 9, 17);
                    if (tempPrev != tempHour){   
                      tft.fillRect(0,30,160,98,ST7735_BLACK);           
                      tft.setFont(&FreeSans24pt7b);
                      tft.setTextSize(2);
                      if ((tempHour > 12 ? tempHour - 12 : tempHour) < 10){
                        tft.setCursor(54, 105);
                      } else {
                        tft.setCursor(26, 105);
                      }
                      tft.print((tempHour > 12 ? tempHour - 12 : tempHour));
                      tft.setFont(&FreeSans12pt7b);
                      tft.setTextSize(1);
                      tft.setCursor(139, 65);
                      if(tempHour >= 12){
                        tft.print("P");
                      } else {
                        tft.print("A");
                      }
                      tft.setCursor(136, 99);
                      tft.print("M");
                    }
                    readButtons();
                    vTaskDelay(5 / portTICK_PERIOD_MS);
                    if(curr[1] == 1 && prev[1] == 0) {
                      curr[1] = prev[1];
                      tempPrev = 99;
                      h2 = tempHour;
                      valState = false;
                      vTaskDelay(150 / portTICK_PERIOD_MS);
                    } else if(curr[0] == 1 && prev[0] == 0) {
                      tempPrev = 99;
                      temporary();
                      valState = false;
                      curr[0] = prev[0];
                      vTaskDelay(150 / portTICK_PERIOD_MS);
                    }
                  }
                }
                drawn = false;
              }
              if (curr[0] == 1 && prev[0] == 0){
                alarmState = valState = 0;
                pref.putInt("M2", m2);
                pref.putInt("H2", h2);
                curr[0] = prev[0] = 0;
                tft.setTextColor(ST77XX_WHITE);
                tft.fillScreen(ST77XX_BLACK);
                tft.setFont(&FreeSans12pt7b);
                tft.setTextSize(1);
                tft.setCursor(48,26);
                tft.print("Alarm");
                _select = 3;
                vTaskDelay(150 / portTICK_PERIOD_MS);
              }
            }
          } else if (_select == 2){
            for (int i = 0; i < 8; i++){
              digitalWrite(gridBox.data, HIGH);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            for (int i = 0; i < 16; i++){
              digitalWrite(gridBox.data, LOW);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            digitalWrite(gridBox.latch, HIGH);
            digitalWrite(gridBox.latch, LOW);
            tft.fillRect(0,60,160,120,ST7735_BLACK);
            tft.fillRect(0,0,160,30,ST7735_WHITE);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextColor(ST77XX_BLACK);           
            tft.setTextSize(1);
            tft.setCursor(48,24);
            tft.print("Night");
            tft.setTextColor(ST77XX_WHITE);         
            tft.setFont(&FreeSans18pt7b);
            tft.setTextSize(1);            
            tft.drawRect(6, 78, 63, 36, ST77XX_WHITE);
            tft.setCursor(9, 108);
            tft.print("Min  ");  
            tft.drawRect(73, 78, 81, 36, ST77XX_WHITE);
            tft.setCursor(76, 108);
            tft.print("Hour");

////////////Night!
            while(alarmState){
              if (!drawn){
                tft.fillScreen(ST77XX_BLACK);
                tft.setFont(&FreeSans12pt7b);
                tft.fillRect(0,0,160,30,ST7735_WHITE);
                tft.setTextColor(ST77XX_BLACK);           
                tft.setTextSize(1);
                tft.setCursor(48,24);
                tft.print("Night");
                tft.setTextColor(ST77XX_WHITE);           
                tft.fillRect(0,30,160,98,ST7735_BLACK);
                tft.setFont(&FreeSans12pt7b);
                tft.setTextSize(1);
                tft.setCursor(36,58);
                tft.print((h3 > 12 ? h3 - 12 : h3));    
                tft.print(":");
                tft.print((m3 > 9 ? "" : "0"));
                tft.print(m3);
                tft.setCursor(94,58);            
                tft.print("PM");
                tft.setFont(&FreeSans18pt7b);
                tft.setTextSize(1);            
                tft.drawRect(6, 78, 63, 36, ST77XX_WHITE);
                tft.setCursor(9, 108);
                tft.print("Min  ");  
                tft.drawRect(73, 78, 81, 36, ST77XX_WHITE);
                tft.setCursor(76, 108);
                tft.print("Hour");
                
                drawn = true;
              }
              readButtons();
              tempPrev = _select;
              _select = map(analogRead(A0), 0, 4095, 0, 1);
              if (_select == 1){
                if (tempPrev != _select){
                  tft.setTextColor(ST77XX_WHITE);
                  tft.fillRect(6, 78, 63, 36, ST77XX_BLACK);                  
                  tft.drawRect(6, 78, 63, 36, ST77XX_WHITE);                  
                  tft.setCursor(9, 108);
                  tft.print("Min  ");
                  tft.setTextColor(ST77XX_BLACK);
                  tft.fillRect(73, 78, 81, 36, ST77XX_WHITE);
                  tft.setCursor(76, 108);
                  tft.print("Hour");
                  
                } else {
                  if(millis() - t0 >= 500){
                    t0 = millis();
                    if (blink){               
                      tft.setTextColor(ST77XX_BLACK);
                      tft.fillRect(73, 78, 81, 36, ST77XX_WHITE);
                      tft.setCursor(76, 108);
                      tft.print("Hour");
                      tft.setTextColor(ST77XX_WHITE); 
                    } else {                
                      tft.setTextColor(ST77XX_WHITE);
                      tft.fillRect(73, 78, 81, 36, ST77XX_BLACK);
                      tft.drawRect(73, 78, 81, 36, ST77XX_WHITE);
                      tft.setCursor(76, 108);
                      tft.print("Hour");
                    }
                    blink = !blink;
                  }
                }
              } else if (_select ==0){
                if (tempPrev != _select){
                  tft.fillRect(6, 78, 63, 36, ST77XX_WHITE);                  
                  tft.setTextColor(ST77XX_BLACK);
                  tft.setCursor(9, 108);
                  tft.print("Min  ");
                  tft.setTextColor(ST77XX_WHITE);
                  tft.fillRect(73, 78, 81, 36, ST77XX_BLACK);
                  tft.drawRect(73, 78, 81, 36, ST77XX_WHITE);
                  tft.setCursor(76, 108);
                  tft.print("Hour");
                }  else {
                  if(millis() - t0 >= 500){
                    t0 = millis();
                    if (blink){               
                      tft.fillRect(6, 78, 63, 36, ST77XX_WHITE);                  
                      tft.setTextColor(ST77XX_BLACK);
                      tft.setCursor(9, 108);
                      tft.print("Min  ");
                      tft.setTextColor(ST77XX_WHITE);
                    } else {                
                      tft.setTextColor(ST77XX_WHITE);
                      tft.fillRect(6, 78, 63, 36, ST77XX_BLACK);                  
                      tft.drawRect(6, 78, 63, 36, ST77XX_WHITE);                  
                      tft.setCursor(9, 108);
                      tft.print("Min  ");
                    }
                    blink = !blink;
                  }
                }                 
              }
              if (curr[1] == 1 && prev[1] == 0){
                curr[1] = prev[1];
                tempPrev = 99;              
                vTaskDelay(150 / portTICK_PERIOD_MS);      
                valState = true;
                tft.setTextColor(ST7735_WHITE);           
                if(_select == 0){                   
                  tft.fillScreen(ST77XX_BLACK);
                  tft.setFont(&FreeSans12pt7b);
                  tft.setTextSize(1);
                  tft.setCursor(59,26);
                  tft.print("Min");
                  tft.setFont(&FreeSans24pt7b);
                  tft.setTextSize(2);
                  tft.setCursor(26, 105);
                  tft.print(tempMin);
//////////////////Night_MIN
                  while (valState){
                    tempPrev = tempMin;
                    tempMin = map(analogRead(A0), 0, 4095, 0, 59);
                    if(tempPrev != tempMin){
                      tft.fillRect(0,30,160,98,ST7735_BLACK);
                      tft.setFont(&FreeSans24pt7b);
                      tft.setTextSize(2);
                      if (tempMin < 10){
                        tft.setCursor(54, 105);
                      } else {
                        tft.setCursor(26, 105);
                      }
                      tft.print(tempMin);
                    }
                    readButtons();
                    vTaskDelay(5 / portTICK_PERIOD_MS);
                    if(curr[1] == 1 && prev[1] == 0) {
                      curr[1] = prev[1];
                      tempPrev = 99;
                      m3 = tempMin;
                      valState = false;
                      vTaskDelay(150 / portTICK_PERIOD_MS);
                    } else if(curr[0] == 1 && prev[0] == 0) {
                      tempPrev = 99;
                      temporary();
                      valState = false;
                      curr[0] = prev[0];
                      vTaskDelay(150 / portTICK_PERIOD_MS);
                    }
                  }
                } else if (_select == 1){
                  tft.fillScreen(ST77XX_BLACK);
                  tft.setFont(&FreeSans12pt7b);
                  tft.setTextSize(1);
                  tft.setCursor(56,26);
                  tft.print("Hour");
                  tft.setFont(&FreeSans24pt7b);
                  tft.setTextSize(2);
                  tft.setCursor(26, 105);
                  tft.print(tempHour);
//////////////////Night_HOUR
                  while (valState){
                    tempPrev = tempHour;            
                    tempHour = map(analogRead(A0), 0, 4095, 18, 23);
                    if (tempPrev != tempHour){   
                      tft.fillRect(0,30,160,98,ST7735_BLACK);           
                      tft.setFont(&FreeSans24pt7b);
                      tft.setTextSize(2);
                      if ((tempHour > 12 ? tempHour - 12 : tempHour) < 10){
                        tft.setCursor(54, 105);
                      } else {
                        tft.setCursor(26, 105);
                      }
                      tft.print((tempHour > 12 ? tempHour - 12 : tempHour));
                      tft.setFont(&FreeSans12pt7b);
                      tft.setTextSize(1);
                      tft.setCursor(139, 65);
                      if(tempHour >= 12){
                        tft.print("P");
                      } else {
                        tft.print("A");
                      }
                      tft.setCursor(136, 99);
                      tft.print("M");
                    }
                    readButtons();
                    vTaskDelay(5 / portTICK_PERIOD_MS);
                    if(curr[1] == 1 && prev[1] == 0) {
                      curr[1] = prev[1];
                      curr[1] = prev[1];
                      tempPrev = 99;
                      h3 = tempHour;
                      valState = false;
                      vTaskDelay(150 / portTICK_PERIOD_MS);
                    } else if(curr[0] == 1 && prev[0] == 0) {
                      tempPrev = 99;
                      temporary();
                      valState = false;
                      curr[0] = prev[0];
                      vTaskDelay(150 / portTICK_PERIOD_MS);
                    }
                  }
                }
                drawn = false;
              }
              if (curr[0] == 1 && prev[0] == 0){
                alarmState = valState = 0;
                pref.putInt("M3", m3);
                pref.putInt("H3", h3);
                curr[0] = prev[0] = 0;
                tft.setTextColor(ST77XX_WHITE);
                tft.fillScreen(ST77XX_BLACK);
                tft.setFont(&FreeSans12pt7b);
                tft.setTextSize(1);
                tft.setCursor(48,26);
                tft.print("Alarm");
                _select = 3;
                vTaskDelay(150 / portTICK_PERIOD_MS);
              }
            }
          } 
        } else if (curr[0] == 1 && prev[0] == 0){ 
          Serial.println("return")   ;
          _select = tempPrev = editState  = alarmState = selectState = 0;                      
          editState  = alarmState = valState = false;
          selectEdit = false;   
          prevMin = lastAlarm = 80;       
          vTaskDelay( 150 / portTICK_PERIOD_MS);
          for (int i = 0; i < 24; i++){
            digitalWrite(gridBox.data, LOW);
            digitalWrite(gridBox.clock, HIGH);
            digitalWrite(gridBox.clock, LOW);
          }
          digitalWrite(gridBox.latch, HIGH);
          digitalWrite(gridBox.latch, LOW);
        }
      }
    } else if(selectEdit == 0) {
      editTimeScreen(true);
      temporary();
      while(editState && !selectState){            
 
        readButtons();
        tempPrev = _select;
 
        _select = map(analogRead(A0), 0, 4095, 0, 4);
        if (!drawn){
          editTimeScreen(false);        
          drawn = true;
          _select = tempPrev = 0;  
        } 

        switch (_select){
          case 0:
            // tft.fillRect(42,27,160,128,ST7735_BLACK);
            if (tempPrev != _select){            
              if(tempPrev > 1){
                tft.fillRect(0,30,160,120,ST7735_BLACK);
              }  
              tft.fillRect(6, 48, 63, 36, ST77XX_WHITE);
              tft.setTextColor(ST77XX_BLACK);
              tft.setCursor(9, 78);
              tft.print("Min");
              tft.setTextColor(ST7735_WHITE);
              tft.fillRect(73, 48, 81, 36, ST77XX_BLACK);
              tft.drawRect(73, 48, 81, 36, ST77XX_WHITE);
              tft.setCursor(76, 78);
              tft.print("Hour"); 
            } else {
              if(millis() - t0 >= 500){
                t0 = millis();
                if (blink){
                  tft.setTextColor(ST77XX_WHITE);
                  tft.fillRect(6, 48, 63, 36, ST77XX_BLACK);    
                  tft.drawRect(6, 48, 63, 36, ST77XX_WHITE);    
                  tft.setCursor(9, 78);
                  tft.print("Min");  
                } else {
                  tft.fillRect(6, 48, 63, 36, ST77XX_WHITE);
                  tft.setTextColor(ST77XX_BLACK);
                  tft.setCursor(9, 78);
                  tft.print("Min");
                  tft.setTextColor(ST77XX_WHITE);                   
                }
                blink = !blink;
              }
            }
            break;
          case 1:
            // tft.fillRect(42,27,160,128,ST7735_BLACK);
            if (tempPrev != _select){
              tft.fillRect(0,30,160,120,ST7735_BLACK);
              tft.setTextColor(ST77XX_WHITE);
              tft.fillRect(6, 48, 63, 36, ST77XX_BLACK);    
              tft.drawRect(6, 48, 63, 36, ST77XX_WHITE);    
              tft.setCursor(9, 78);
              tft.print("Min");
              tft.setTextColor(ST77XX_BLACK);
              tft.fillRect(73, 48, 81, 36, ST77XX_WHITE);            
              tft.setCursor(76, 78);
              tft.print("Hour");              
              tft.setTextColor(ST77XX_WHITE);
              tft.setFont(&FreeSans12pt7b);
              tft.setCursor(84, 111);
              tft.print("Date");   
              tft.setFont(&FreeSans18pt7b);
              tft.setTextSize(1); 
              tft.fillTriangle(138, 115, 138, 90, 154, 102, ST77XX_WHITE);
            } else {
              if(millis() - t0 >= 500){
                t0 = millis();
                if (blink){
                  tft.setTextColor(ST7735_WHITE);
                  tft.fillRect(73, 48, 81, 36, ST77XX_BLACK);
                  tft.drawRect(73, 48, 81, 36, ST77XX_WHITE);
                  tft.setCursor(76, 78);
                  tft.print("Hour"); 
                } else {
                  tft.setTextColor(ST7735_BLACK);
                  tft.fillRect(73, 48, 81, 36, ST77XX_WHITE);
                  tft.drawRect(73, 48, 81, 36, ST77XX_WHITE);
                  tft.setCursor(76, 78);
                  tft.print("Hour");
                  tft.setTextColor(ST7735_WHITE);
                }
                blink = !blink;
              }
            }
            break;
          case 2:
            if (tempPrev != _select){
              tft.fillRect(0,30,160,120,ST7735_BLACK);
              tft.fillRect(6, 36, 63, 36, ST77XX_WHITE);
              tft.setTextColor(ST77XX_BLACK);
              tft.setCursor(8, 66);
              tft.print("Day");
              tft.setTextColor(ST7735_WHITE);
              tft.fillRect(73, 36, 81, 36, ST77XX_BLACK);
              tft.drawRect(73, 36, 81, 36, ST77XX_WHITE);
              tft.setCursor(74, 66);
              tft.print("Mont");        
              tft.fillRect(41, 80, 81, 36, ST77XX_BLACK);
              tft.drawRect(41, 80, 81, 36, ST77XX_WHITE);
              tft.setCursor(44, 110);
              tft.print("Year");
              tft.fillTriangle(22, 115, 22, 90, 6, 102, ST77XX_WHITE);
            } else {
              if(millis() - t0 >= 500){
                t0 = millis();
                if (blink){
                  tft.setTextColor(ST7735_WHITE);                   
                  tft.fillRect(6, 36, 63, 36, ST77XX_BLACK);
                  tft.drawRect(6, 36, 63, 36, ST77XX_WHITE);                  
                  tft.setCursor(8, 66);
                  tft.print("Day");
                  // tft.fillTriangle(22, 115, 22, 90, 6, 102, ST77XX_WHITE); 
                } else {
                  tft.fillRect(6, 36, 63, 36, ST77XX_WHITE);
                  tft.setTextColor(ST77XX_BLACK);
                  tft.setCursor(8, 66);
                  tft.print("Day");
                  tft.setTextColor(ST7735_WHITE);                   
                }
                blink = !blink;
              }
            }
            break;
          case 3:
            if (tempPrev != _select){
              if(tempPrev < 2){
                tft.fillRect(0,30,160,120,ST7735_BLACK);
              }
              tft.setTextColor(ST7735_BLACK);
              tft.fillRect(73, 36, 81, 36, ST77XX_WHITE);
              tft.setCursor(74, 66);
              tft.print("Mont");
              tft.setTextColor(ST7735_WHITE); 
              tft.fillRect(6, 36, 63, 36, ST77XX_BLACK);    
              tft.drawRect(6, 36, 63, 36, ST77XX_WHITE);    
              tft.setCursor(8, 66);
              tft.print("Day");
              tft.fillRect(41, 80, 81, 36, ST77XX_BLACK);
              tft.drawRect(41, 80, 81, 36, ST77XX_WHITE);
              tft.setCursor(44, 110);
              tft.print("Year");
            } else {
              if(millis() - t0 >= 500){
                t0 = millis();
                if (blink){
                  tft.setTextColor(ST7735_WHITE); 
                  tft.fillRect(73, 36, 81, 36, ST77XX_BLACK);
                  tft.drawRect(73, 36, 81, 36, ST77XX_WHITE);                  
                  tft.setCursor(74, 66);
                  tft.print("Mont");
                } else {
                  tft.setTextColor(ST7735_BLACK);
                  tft.fillRect(73, 36, 81, 36, ST77XX_WHITE);
                  tft.setCursor(74, 66);
                  tft.print("Mont");
                  tft.setTextColor(ST7735_WHITE); 
                }
                blink = !blink;
              }
            }
            break;
          case 4:
            if (tempPrev != _select){
              if(tempPrev < 2){
                tft.fillRect(0,30,160,120,ST7735_BLACK);
              }
              tft.setTextColor(ST7735_BLACK);
              tft.fillRect(41, 80, 81, 36, ST77XX_WHITE);            
              tft.setCursor(44, 110);
              tft.print("Year");
              tft.setTextColor(ST7735_WHITE); 
              tft.fillRect(73, 36, 81, 36, ST77XX_BLACK);
              tft.drawRect(73, 36, 81, 36, ST77XX_WHITE);
              tft.setCursor(74, 66);
              tft.print("Mont");
              tft.fillRect(6, 36, 63, 36, ST77XX_BLACK);    
              tft.drawRect(6, 36, 63, 36, ST77XX_WHITE);    
              tft.setCursor(8, 66);
              tft.print("Day");
            } else {
              if(millis() - t0 >= 500){
                t0 = millis();
                if (blink){
                  tft.setTextColor(ST7735_WHITE); 
                  tft.fillRect(41, 80, 81, 36, ST77XX_BLACK);
                  tft.drawRect(41, 80, 81, 36, ST77XX_WHITE);
                  tft.setCursor(44, 110);
                  tft.print("Year");
                } else {
                  tft.setTextColor(ST7735_BLACK);
                  tft.fillRect(41, 80, 81, 36, ST77XX_WHITE);            
                  tft.setCursor(44, 110);
                  tft.print("Year");
                  tft.setTextColor(ST7735_WHITE); 
                }
                blink = !blink;
              }
            }
            break;
          default:
            break;
        }
        
        if (curr[1] == 1 && prev[1] == 0){                
          tempPrev = 99;
          valState = true;
          tft.setTextColor(ST7735_WHITE);           
          vTaskDelay(100 / portTICK_PERIOD_MS);
          if (_select == 0){
            Serial.println("Min");          
            tft.fillScreen(ST77XX_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextSize(1);
            tft.setCursor(59,26);
            tft.print("Min");
            tft.setFont(&FreeSans24pt7b);
            tft.setTextSize(2);
            if (tempMin < 10){
              tft.setCursor(54, 105);
            } else {
              tft.setCursor(26, 105);
            }
            tft.print(tempMin);
            while (valState){
              tempPrev = tempMin;
              tempMin = map(analogRead(A0), 0, 4095, 0, 59);
              if(tempPrev != tempMin){
                tft.fillRect(0,30,160,98,ST7735_BLACK);
                tft.setFont(&FreeSans24pt7b);
                tft.setTextSize(2);
                if (tempMin < 10){
                  tft.setCursor(54, 105);
                } else {
                  tft.setCursor(26, 105);
                }
                tft.print(tempMin);
              }
              readButtons();
              vTaskDelay(5 / portTICK_PERIOD_MS);
              if(curr[1] == 1 && prev[1] == 0) {
                curr[1] = prev[1];
                tempPrev = 99;
                valState = false;
                vTaskDelay(150 / portTICK_PERIOD_MS);
              } else if(curr[0] == 1 && prev[0] == 0) {
                tempPrev = 99;
                temporary();
                valState = false;
                curr[0] = prev[0];
                vTaskDelay(150 / portTICK_PERIOD_MS);
              }
            }
          } else if(_select == 1) {
            Serial.println("Hour");          
            tft.fillScreen(ST77XX_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextSize(1);
            tft.setCursor(56,26);
            tft.print("Hour");
            tft.setFont(&FreeSans24pt7b);
            tft.setTextSize(2);
            tft.setCursor(26, 105);
            tft.print(tempHour);
            while (valState){
              tempPrev = tempHour;            
              tempHour = map(analogRead(A0), 0, 4095, 0, 23);
              if (tempPrev != tempHour){   
                tft.fillRect(0,30,160,98,ST7735_BLACK);           
                tft.setFont(&FreeSans24pt7b);
                tft.setTextSize(2);
                if ((tempHour > 12 ? tempHour - 12 : tempHour) < 10){
                  tft.setCursor(54, 105);
                } else {
                  tft.setCursor(26, 105);
                }
                tft.print((tempHour > 12 ? tempHour - 12 : tempHour));
                tft.setFont(&FreeSans12pt7b);
                tft.setTextSize(1);
                tft.setCursor(139, 65);
                if(tempHour >= 12){
                  tft.print("P");
                } else {
                  tft.print("A");
                }
                tft.setCursor(136, 99);
                tft.print("M");
              }
              readButtons();
              vTaskDelay(5 / portTICK_PERIOD_MS);
              if(curr[1] == 1 && prev[1] == 0) {
                curr[1] = prev[1];
                tempPrev = 99;
                valState = false;
                vTaskDelay(150 / portTICK_PERIOD_MS);
              } else if(curr[0] == 1 && prev[0] == 0) {
                tempPrev = 99;
                temporary();
                valState = false;
                curr[0] = prev[0];
                vTaskDelay(150 / portTICK_PERIOD_MS);
              }
            }
          } else if(_select == 2) {Serial.println("Day");  
            tft.fillScreen(ST77XX_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextSize(1);
            tft.setCursor(59,26);
            tft.print("Day");
            tft.setFont(&FreeSans24pt7b);
            tft.setTextSize(2);
            tft.setCursor(26, 105);
            tft.print(tempDay);
            while (valState){
              tempPrev = tempDay;
              tempDay = map(analogRead(A0), 0, 4095, 1, 31);
              if (tempPrev != tempDay){    
                tft.fillRect(0,30,160,98,ST7735_BLACK);          
                tft.setFont(&FreeSans24pt7b);
                tft.setTextSize(2);
                if (tempDay < 10){
                  tft.setCursor(54, 105);
                } else {
                  tft.setCursor(26, 105);
                }
                tft.print(tempDay);
              }
              readButtons();
              vTaskDelay(5 / portTICK_PERIOD_MS);
              if(curr[1] == 1 && prev[1] == 0) {
                curr[1] = prev[1];
                tempPrev = 99;
                valState = false;
                vTaskDelay(150 / portTICK_PERIOD_MS);
              } else if(curr[0] == 1 && prev[0] == 0) {
                tempPrev = 99;
                temporary();
                valState = false;
                curr[0] = prev[0];
                vTaskDelay(150 / portTICK_PERIOD_MS);
              }
            }        
          } else if(_select == 3){Serial.println("Month");  
            tft.fillScreen(ST77XX_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextSize(1);
            tft.setCursor(48,26);
            tft.print("Month");
            tft.setFont(&FreeSans24pt7b);
            tft.setTextSize(2);
            tft.setCursor(26, 105);
            tft.print(tempMonth);
            while (valState){
              tempPrev = tempMonth;
              tempMonth = map(analogRead(A0), 0, 4095, 1, 12);
              if (tempPrev != tempMonth){    
                tft.fillRect(0,30,160,98,ST7735_BLACK);  
                tft.setFont(&FreeSans24pt7b);
                tft.setTextSize(2);
                if (tempMonth == 3 || tempMonth == 9 || tempMonth == 12){
                  tft.setCursor(-3, 107);        
                } else if( tempMonth == 5 || tempMonth == 11 ){
                  tft.setCursor(-5, 107);                          
                } else {
                  tft.setCursor(0, 107);
                }
                if( tempMonth == 5){
                  
                  tft.print("M");
                  tft.setCursor(67, 107);                                            
                  tft.print("a");           
                  tft.setTextWrap(false);
                  tft.setCursor(113, 107);                                            
                  tft.print("y");                                  
                  tft.setTextWrap(true);
                }
                else{
                  tft.print(months[tempMonth -1]);
                }
              }
              readButtons();
              vTaskDelay(5 / portTICK_PERIOD_MS);
              if(curr[1] == 1 && prev[1] == 0) {
                curr[1] = prev[1];
                tempPrev = 99;
                valState = false;
                vTaskDelay(150 / portTICK_PERIOD_MS);
              } else if(curr[0] == 1 && prev[0] == 0) {
                tempPrev = 99;
                temporary();
                valState = false;
                curr[0] = prev[0];
                vTaskDelay(150 / portTICK_PERIOD_MS);
              }
            }
          } else if(_select == 4){Serial.println("Year");  
            tft.fillScreen(ST77XX_BLACK);
            tft.setFont(&FreeSans12pt7b);
            tft.setTextSize(1);
            tft.setCursor(48,26);
            tft.print("Year");
            tft.setFont(&FreeSans24pt7b);
            tft.setTextSize(2);
            tft.setCursor(26, 105);
            tft.print(tempYear);
            while (valState){
              tempPrev = tempYear;
              tempYear = map(analogRead(A0), 0, 4095, 24, 99);
              if (tempPrev != tempYear){    
                tft.fillRect(0,30,160,98,ST7735_BLACK);  
                tft.setFont(&FreeSans24pt7b);
                tft.setTextSize(2);
                if (tempYear < 10){
                  tft.setCursor(54, 105);
                } else {
                  tft.setCursor(26, 105);
                }
                tft.print(tempYear);              
              }
              readButtons();
              vTaskDelay(5 / portTICK_PERIOD_MS);
              if(curr[1] == 1 && prev[1] == 0) {
                curr[1] = prev[1];
                valState = false;
                vTaskDelay(150 / portTICK_PERIOD_MS);
              } else if(curr[0] == 1 && prev[0] == 0) {
                tempPrev = 99;
                temporary();
                valState = false;
                curr[0] = prev[0];
                vTaskDelay(150 / portTICK_PERIOD_MS);
              }
            }
          }
          drawn = false;       
        } else if (curr[0] == 1 && prev[0] == 0){
          timeinfo.tm_year = tempYear + 100;
          timeinfo.tm_mon = tempMonth - 1;
          timeinfo.tm_mday = tempDay;
          timeinfo.tm_hour = tempHour;
          timeinfo.tm_min = tempMin;
          pref.putInt("Year", timeinfo.tm_year);
          pref.putInt("Month", timeinfo.tm_mon);
          pref.putInt("Day", timeinfo.tm_mday);
          pref.putInt("Hour", timeinfo.tm_hour);
          pref.putInt("Min", timeinfo.tm_min);
          time_t t = mktime(&timeinfo);
          printf("Setting time: %s", asctime(&timeinfo));
          struct timeval now = { .tv_sec = t };
          settimeofday(&now, NULL);
          _select = tempPrev = editState  = alarmState = selectState = valState = 0;

          synced = false;
          updated = true;     
          editState = false;

          timeScreen();
          curr[0] = 0;
          prev[0] = 0;
          vTaskDelay(500 / portTICK_PERIOD_MS);
        }
      }
    }
  } else {
    if (curr[0] == 1 && prev[0] == 0){
      if(!toggleAlarm){
        editState = !editState;
      vTaskDelay(150/portTICK_PERIOD_MS);
      }
    }
    if(updated){
      //Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
      if(prevMin != timeinfo.tm_min){
        timeScreen();
        pref.putInt("Year", timeinfo.tm_year);
        pref.putInt("Month", timeinfo.tm_mon);
        pref.putInt("Day", timeinfo.tm_mday);
        pref.putInt("Hour", timeinfo.tm_hour);
        pref.putInt("Min", timeinfo.tm_min);
         Serial.print(prevMin);
        Serial.print(",");
        Serial.println(timeinfo.tm_min);
        prevMin = timeinfo.tm_min;
        Serial.print(prevMin);
        Serial.print(",");
        Serial.println(timeinfo.tm_min);
        for (int i = 0; i < 24; i++){
          digitalWrite(gridBox.data, LOW);
          digitalWrite(gridBox.clock, HIGH);
          digitalWrite(gridBox.clock, LOW);
        }
        digitalWrite(gridBox.latch, HIGH);
        digitalWrite(gridBox.latch, LOW);
      }
      if(toggleAlarm){
        if(millis() - t0 >= 250){
          t0 = millis();
          if(blink){
            timeScreen();
            for (int i = 0; i < 24; i++){
              digitalWrite(gridBox.data, LOW);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            digitalWrite(gridBox.latch, HIGH);
            digitalWrite(gridBox.latch, LOW);
          } else {
            timeScreen(true);
            ledPostion(timeinfo.tm_wday , currentalarm);
          }
          blink = !blink;
        }
        if (curr[1] == 1 && prev[1] == 0){
          curr[1] = prev[1];
          tempPrev = 99;
          toggleAlarm = false;
          timeScreen();
          for (int i = 0; i < 24; i++){
              digitalWrite(gridBox.data, LOW);
              digitalWrite(gridBox.clock, HIGH);
              digitalWrite(gridBox.clock, LOW);
            }
            digitalWrite(gridBox.latch, HIGH);
            digitalWrite(gridBox.latch, LOW);
          currentalarm = 0;
          blink = true;
        }
       
      } else {
        if(prevMin != timeinfo.tm_min){
          for (int i = 0; i < 24; i++){
            digitalWrite(gridBox.data, LOW);
            digitalWrite(gridBox.clock, HIGH);
            digitalWrite(gridBox.clock, LOW);
          }
          digitalWrite(gridBox.latch, HIGH);
          digitalWrite(gridBox.latch, LOW);
        }
      }
    } else {      
      Serial.println("not updated");
      tft.getTextBounds("not updated", 0, 0, &x, &y, &w, &h);
      tft.setCursor((160 - w)/2,(128 - h)/2);
      tft.print("not updated");
    }
  }
  
  vTaskDelay(10/ portTICK_PERIOD_MS);
}
